// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef PROTOBUF_message_2eproto__INCLUDED
#define PROTOBUF_message_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace bio {
namespace motions {
namespace format {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_message_2eproto();
void protobuf_AssignDesc_message_2eproto();
void protobuf_ShutdownFile_message_2eproto();

class Point;
class Callback;
class Header;
class Header_ChainDescription;
class Header_ChainDescription_BeadDescription;
class Header_ChainDescription_BeadDescription_Binding;
class Delta;
class Keyframe;
class Keyframe_Binder;
class Keyframe_Chain;

enum Callback_Type {
  Callback_Type_INT = 1,
  Callback_Type_DOUBLE = 2,
  Callback_Type_INT_LIST = 3,
  Callback_Type_DOUBLE_LIST = 4
};
bool Callback_Type_IsValid(int value);
const Callback_Type Callback_Type_Type_MIN = Callback_Type_INT;
const Callback_Type Callback_Type_Type_MAX = Callback_Type_DOUBLE_LIST;
const int Callback_Type_Type_ARRAYSIZE = Callback_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Callback_Type_descriptor();
inline const ::std::string& Callback_Type_Name(Callback_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Callback_Type_descriptor(), value);
}
inline bool Callback_Type_Parse(
    const ::std::string& name, Callback_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Callback_Type>(
    Callback_Type_descriptor(), name, value);
}
// ===================================================================

class Point : public ::google::protobuf::Message {
 public:
  Point();
  virtual ~Point();

  Point(const Point& from);

  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Point& default_instance();

  void Swap(Point* other);

  // implements Message ----------------------------------------------

  Point* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Point& from);
  void MergeFrom(const Point& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline ::google::protobuf::int32 x() const;
  inline void set_x(::google::protobuf::int32 value);

  // optional sint32 y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline ::google::protobuf::int32 y() const;
  inline void set_y(::google::protobuf::int32 value);

  // optional sint32 z = 3;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline ::google::protobuf::int32 z() const;
  inline void set_z(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:bio.motions.format.proto.Point)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  ::google::protobuf::int32 z_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static Point* default_instance_;
};
// -------------------------------------------------------------------

class Callback : public ::google::protobuf::Message {
 public:
  Callback();
  virtual ~Callback();

  Callback(const Callback& from);

  inline Callback& operator=(const Callback& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Callback& default_instance();

  void Swap(Callback* other);

  // implements Message ----------------------------------------------

  Callback* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Callback& from);
  void MergeFrom(const Callback& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Callback_Type Type;
  static const Type INT = Callback_Type_INT;
  static const Type DOUBLE = Callback_Type_DOUBLE;
  static const Type INT_LIST = Callback_Type_INT_LIST;
  static const Type DOUBLE_LIST = Callback_Type_DOUBLE_LIST;
  static inline bool Type_IsValid(int value) {
    return Callback_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Callback_Type_Type_MIN;
  static const Type Type_MAX =
    Callback_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Callback_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Callback_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Callback_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Callback_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional .bio.motions.format.proto.Callback.Type callback_type = 2;
  inline bool has_callback_type() const;
  inline void clear_callback_type();
  static const int kCallbackTypeFieldNumber = 2;
  inline ::bio::motions::format::proto::Callback_Type callback_type() const;
  inline void set_callback_type(::bio::motions::format::proto::Callback_Type value);

  // optional int32 int_value = 3;
  inline bool has_int_value() const;
  inline void clear_int_value();
  static const int kIntValueFieldNumber = 3;
  inline ::google::protobuf::int32 int_value() const;
  inline void set_int_value(::google::protobuf::int32 value);

  // optional double double_value = 4;
  inline bool has_double_value() const;
  inline void clear_double_value();
  static const int kDoubleValueFieldNumber = 4;
  inline double double_value() const;
  inline void set_double_value(double value);

  // repeated int32 int_list_value = 5 [packed = true];
  inline int int_list_value_size() const;
  inline void clear_int_list_value();
  static const int kIntListValueFieldNumber = 5;
  inline ::google::protobuf::int32 int_list_value(int index) const;
  inline void set_int_list_value(int index, ::google::protobuf::int32 value);
  inline void add_int_list_value(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      int_list_value() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_int_list_value();

  // repeated double double_list_value = 6 [packed = true];
  inline int double_list_value_size() const;
  inline void clear_double_list_value();
  static const int kDoubleListValueFieldNumber = 6;
  inline double double_list_value(int index) const;
  inline void set_double_list_value(int index, double value);
  inline void add_double_list_value(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      double_list_value() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_double_list_value();

  // @@protoc_insertion_point(class_scope:bio.motions.format.proto.Callback)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_callback_type();
  inline void clear_has_callback_type();
  inline void set_has_int_value();
  inline void clear_has_int_value();
  inline void set_has_double_value();
  inline void clear_has_double_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  int callback_type_;
  ::google::protobuf::int32 int_value_;
  double double_value_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > int_list_value_;
  mutable int _int_list_value_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > double_list_value_;
  mutable int _double_list_value_cached_byte_size_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static Callback* default_instance_;
};
// -------------------------------------------------------------------

class Header_ChainDescription_BeadDescription_Binding : public ::google::protobuf::Message {
 public:
  Header_ChainDescription_BeadDescription_Binding();
  virtual ~Header_ChainDescription_BeadDescription_Binding();

  Header_ChainDescription_BeadDescription_Binding(const Header_ChainDescription_BeadDescription_Binding& from);

  inline Header_ChainDescription_BeadDescription_Binding& operator=(const Header_ChainDescription_BeadDescription_Binding& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Header_ChainDescription_BeadDescription_Binding& default_instance();

  void Swap(Header_ChainDescription_BeadDescription_Binding* other);

  // implements Message ----------------------------------------------

  Header_ChainDescription_BeadDescription_Binding* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Header_ChainDescription_BeadDescription_Binding& from);
  void MergeFrom(const Header_ChainDescription_BeadDescription_Binding& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 binder_type = 1;
  inline bool has_binder_type() const;
  inline void clear_binder_type();
  static const int kBinderTypeFieldNumber = 1;
  inline ::google::protobuf::int32 binder_type() const;
  inline void set_binder_type(::google::protobuf::int32 value);

  // optional int32 force = 2;
  inline bool has_force() const;
  inline void clear_force();
  static const int kForceFieldNumber = 2;
  inline ::google::protobuf::int32 force() const;
  inline void set_force(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:bio.motions.format.proto.Header.ChainDescription.BeadDescription.Binding)
 private:
  inline void set_has_binder_type();
  inline void clear_has_binder_type();
  inline void set_has_force();
  inline void clear_has_force();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 binder_type_;
  ::google::protobuf::int32 force_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static Header_ChainDescription_BeadDescription_Binding* default_instance_;
};
// -------------------------------------------------------------------

class Header_ChainDescription_BeadDescription : public ::google::protobuf::Message {
 public:
  Header_ChainDescription_BeadDescription();
  virtual ~Header_ChainDescription_BeadDescription();

  Header_ChainDescription_BeadDescription(const Header_ChainDescription_BeadDescription& from);

  inline Header_ChainDescription_BeadDescription& operator=(const Header_ChainDescription_BeadDescription& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Header_ChainDescription_BeadDescription& default_instance();

  void Swap(Header_ChainDescription_BeadDescription* other);

  // implements Message ----------------------------------------------

  Header_ChainDescription_BeadDescription* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Header_ChainDescription_BeadDescription& from);
  void MergeFrom(const Header_ChainDescription_BeadDescription& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Header_ChainDescription_BeadDescription_Binding Binding;

  // accessors -------------------------------------------------------

  // repeated .bio.motions.format.proto.Header.ChainDescription.BeadDescription.Binding energy_vector = 1;
  inline int energy_vector_size() const;
  inline void clear_energy_vector();
  static const int kEnergyVectorFieldNumber = 1;
  inline const ::bio::motions::format::proto::Header_ChainDescription_BeadDescription_Binding& energy_vector(int index) const;
  inline ::bio::motions::format::proto::Header_ChainDescription_BeadDescription_Binding* mutable_energy_vector(int index);
  inline ::bio::motions::format::proto::Header_ChainDescription_BeadDescription_Binding* add_energy_vector();
  inline const ::google::protobuf::RepeatedPtrField< ::bio::motions::format::proto::Header_ChainDescription_BeadDescription_Binding >&
      energy_vector() const;
  inline ::google::protobuf::RepeatedPtrField< ::bio::motions::format::proto::Header_ChainDescription_BeadDescription_Binding >*
      mutable_energy_vector();

  // @@protoc_insertion_point(class_scope:bio.motions.format.proto.Header.ChainDescription.BeadDescription)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::bio::motions::format::proto::Header_ChainDescription_BeadDescription_Binding > energy_vector_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static Header_ChainDescription_BeadDescription* default_instance_;
};
// -------------------------------------------------------------------

class Header_ChainDescription : public ::google::protobuf::Message {
 public:
  Header_ChainDescription();
  virtual ~Header_ChainDescription();

  Header_ChainDescription(const Header_ChainDescription& from);

  inline Header_ChainDescription& operator=(const Header_ChainDescription& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Header_ChainDescription& default_instance();

  void Swap(Header_ChainDescription* other);

  // implements Message ----------------------------------------------

  Header_ChainDescription* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Header_ChainDescription& from);
  void MergeFrom(const Header_ChainDescription& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Header_ChainDescription_BeadDescription BeadDescription;

  // accessors -------------------------------------------------------

  // optional string chain_name = 1;
  inline bool has_chain_name() const;
  inline void clear_chain_name();
  static const int kChainNameFieldNumber = 1;
  inline const ::std::string& chain_name() const;
  inline void set_chain_name(const ::std::string& value);
  inline void set_chain_name(const char* value);
  inline void set_chain_name(const char* value, size_t size);
  inline ::std::string* mutable_chain_name();
  inline ::std::string* release_chain_name();
  inline void set_allocated_chain_name(::std::string* chain_name);

  // repeated .bio.motions.format.proto.Header.ChainDescription.BeadDescription beads = 2;
  inline int beads_size() const;
  inline void clear_beads();
  static const int kBeadsFieldNumber = 2;
  inline const ::bio::motions::format::proto::Header_ChainDescription_BeadDescription& beads(int index) const;
  inline ::bio::motions::format::proto::Header_ChainDescription_BeadDescription* mutable_beads(int index);
  inline ::bio::motions::format::proto::Header_ChainDescription_BeadDescription* add_beads();
  inline const ::google::protobuf::RepeatedPtrField< ::bio::motions::format::proto::Header_ChainDescription_BeadDescription >&
      beads() const;
  inline ::google::protobuf::RepeatedPtrField< ::bio::motions::format::proto::Header_ChainDescription_BeadDescription >*
      mutable_beads();

  // @@protoc_insertion_point(class_scope:bio.motions.format.proto.Header.ChainDescription)
 private:
  inline void set_has_chain_name();
  inline void clear_has_chain_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* chain_name_;
  ::google::protobuf::RepeatedPtrField< ::bio::motions::format::proto::Header_ChainDescription_BeadDescription > beads_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static Header_ChainDescription* default_instance_;
};
// -------------------------------------------------------------------

class Header : public ::google::protobuf::Message {
 public:
  Header();
  virtual ~Header();

  Header(const Header& from);

  inline Header& operator=(const Header& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Header& default_instance();

  void Swap(Header* other);

  // implements Message ----------------------------------------------

  Header* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Header& from);
  void MergeFrom(const Header& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Header_ChainDescription ChainDescription;

  // accessors -------------------------------------------------------

  // optional string simulation_name = 1;
  inline bool has_simulation_name() const;
  inline void clear_simulation_name();
  static const int kSimulationNameFieldNumber = 1;
  inline const ::std::string& simulation_name() const;
  inline void set_simulation_name(const ::std::string& value);
  inline void set_simulation_name(const char* value);
  inline void set_simulation_name(const char* value, size_t size);
  inline ::std::string* mutable_simulation_name();
  inline ::std::string* release_simulation_name();
  inline void set_allocated_simulation_name(::std::string* simulation_name);

  // optional string simulation_description = 2;
  inline bool has_simulation_description() const;
  inline void clear_simulation_description();
  static const int kSimulationDescriptionFieldNumber = 2;
  inline const ::std::string& simulation_description() const;
  inline void set_simulation_description(const ::std::string& value);
  inline void set_simulation_description(const char* value);
  inline void set_simulation_description(const char* value, size_t size);
  inline ::std::string* mutable_simulation_description();
  inline ::std::string* release_simulation_description();
  inline void set_allocated_simulation_description(::std::string* simulation_description);

  // optional int32 binders_types_count = 3;
  inline bool has_binders_types_count() const;
  inline void clear_binders_types_count();
  static const int kBindersTypesCountFieldNumber = 3;
  inline ::google::protobuf::int32 binders_types_count() const;
  inline void set_binders_types_count(::google::protobuf::int32 value);

  // repeated .bio.motions.format.proto.Header.ChainDescription chains = 5;
  inline int chains_size() const;
  inline void clear_chains();
  static const int kChainsFieldNumber = 5;
  inline const ::bio::motions::format::proto::Header_ChainDescription& chains(int index) const;
  inline ::bio::motions::format::proto::Header_ChainDescription* mutable_chains(int index);
  inline ::bio::motions::format::proto::Header_ChainDescription* add_chains();
  inline const ::google::protobuf::RepeatedPtrField< ::bio::motions::format::proto::Header_ChainDescription >&
      chains() const;
  inline ::google::protobuf::RepeatedPtrField< ::bio::motions::format::proto::Header_ChainDescription >*
      mutable_chains();

  // @@protoc_insertion_point(class_scope:bio.motions.format.proto.Header)
 private:
  inline void set_has_simulation_name();
  inline void clear_has_simulation_name();
  inline void set_has_simulation_description();
  inline void clear_has_simulation_description();
  inline void set_has_binders_types_count();
  inline void clear_has_binders_types_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* simulation_name_;
  ::std::string* simulation_description_;
  ::google::protobuf::RepeatedPtrField< ::bio::motions::format::proto::Header_ChainDescription > chains_;
  ::google::protobuf::int32 binders_types_count_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static Header* default_instance_;
};
// -------------------------------------------------------------------

class Delta : public ::google::protobuf::Message {
 public:
  Delta();
  virtual ~Delta();

  Delta(const Delta& from);

  inline Delta& operator=(const Delta& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Delta& default_instance();

  void Swap(Delta* other);

  // implements Message ----------------------------------------------

  Delta* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Delta& from);
  void MergeFrom(const Delta& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .bio.motions.format.proto.Point from = 1;
  inline bool has_from() const;
  inline void clear_from();
  static const int kFromFieldNumber = 1;
  inline const ::bio::motions::format::proto::Point& from() const;
  inline ::bio::motions::format::proto::Point* mutable_from();
  inline ::bio::motions::format::proto::Point* release_from();
  inline void set_allocated_from(::bio::motions::format::proto::Point* from);

  // optional .bio.motions.format.proto.Point disp = 2;
  inline bool has_disp() const;
  inline void clear_disp();
  static const int kDispFieldNumber = 2;
  inline const ::bio::motions::format::proto::Point& disp() const;
  inline ::bio::motions::format::proto::Point* mutable_disp();
  inline ::bio::motions::format::proto::Point* release_disp();
  inline void set_allocated_disp(::bio::motions::format::proto::Point* disp);

  // repeated .bio.motions.format.proto.Callback callbacks = 3;
  inline int callbacks_size() const;
  inline void clear_callbacks();
  static const int kCallbacksFieldNumber = 3;
  inline const ::bio::motions::format::proto::Callback& callbacks(int index) const;
  inline ::bio::motions::format::proto::Callback* mutable_callbacks(int index);
  inline ::bio::motions::format::proto::Callback* add_callbacks();
  inline const ::google::protobuf::RepeatedPtrField< ::bio::motions::format::proto::Callback >&
      callbacks() const;
  inline ::google::protobuf::RepeatedPtrField< ::bio::motions::format::proto::Callback >*
      mutable_callbacks();

  // @@protoc_insertion_point(class_scope:bio.motions.format.proto.Delta)
 private:
  inline void set_has_from();
  inline void clear_has_from();
  inline void set_has_disp();
  inline void clear_has_disp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::bio::motions::format::proto::Point* from_;
  ::bio::motions::format::proto::Point* disp_;
  ::google::protobuf::RepeatedPtrField< ::bio::motions::format::proto::Callback > callbacks_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static Delta* default_instance_;
};
// -------------------------------------------------------------------

class Keyframe_Binder : public ::google::protobuf::Message {
 public:
  Keyframe_Binder();
  virtual ~Keyframe_Binder();

  Keyframe_Binder(const Keyframe_Binder& from);

  inline Keyframe_Binder& operator=(const Keyframe_Binder& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Keyframe_Binder& default_instance();

  void Swap(Keyframe_Binder* other);

  // implements Message ----------------------------------------------

  Keyframe_Binder* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Keyframe_Binder& from);
  void MergeFrom(const Keyframe_Binder& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 binder_type = 1;
  inline bool has_binder_type() const;
  inline void clear_binder_type();
  static const int kBinderTypeFieldNumber = 1;
  inline ::google::protobuf::int32 binder_type() const;
  inline void set_binder_type(::google::protobuf::int32 value);

  // optional .bio.motions.format.proto.Point position = 2;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 2;
  inline const ::bio::motions::format::proto::Point& position() const;
  inline ::bio::motions::format::proto::Point* mutable_position();
  inline ::bio::motions::format::proto::Point* release_position();
  inline void set_allocated_position(::bio::motions::format::proto::Point* position);

  // @@protoc_insertion_point(class_scope:bio.motions.format.proto.Keyframe.Binder)
 private:
  inline void set_has_binder_type();
  inline void clear_has_binder_type();
  inline void set_has_position();
  inline void clear_has_position();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::bio::motions::format::proto::Point* position_;
  ::google::protobuf::int32 binder_type_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static Keyframe_Binder* default_instance_;
};
// -------------------------------------------------------------------

class Keyframe_Chain : public ::google::protobuf::Message {
 public:
  Keyframe_Chain();
  virtual ~Keyframe_Chain();

  Keyframe_Chain(const Keyframe_Chain& from);

  inline Keyframe_Chain& operator=(const Keyframe_Chain& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Keyframe_Chain& default_instance();

  void Swap(Keyframe_Chain* other);

  // implements Message ----------------------------------------------

  Keyframe_Chain* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Keyframe_Chain& from);
  void MergeFrom(const Keyframe_Chain& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .bio.motions.format.proto.Point bead_positions = 1;
  inline int bead_positions_size() const;
  inline void clear_bead_positions();
  static const int kBeadPositionsFieldNumber = 1;
  inline const ::bio::motions::format::proto::Point& bead_positions(int index) const;
  inline ::bio::motions::format::proto::Point* mutable_bead_positions(int index);
  inline ::bio::motions::format::proto::Point* add_bead_positions();
  inline const ::google::protobuf::RepeatedPtrField< ::bio::motions::format::proto::Point >&
      bead_positions() const;
  inline ::google::protobuf::RepeatedPtrField< ::bio::motions::format::proto::Point >*
      mutable_bead_positions();

  // @@protoc_insertion_point(class_scope:bio.motions.format.proto.Keyframe.Chain)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::bio::motions::format::proto::Point > bead_positions_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static Keyframe_Chain* default_instance_;
};
// -------------------------------------------------------------------

class Keyframe : public ::google::protobuf::Message {
 public:
  Keyframe();
  virtual ~Keyframe();

  Keyframe(const Keyframe& from);

  inline Keyframe& operator=(const Keyframe& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Keyframe& default_instance();

  void Swap(Keyframe* other);

  // implements Message ----------------------------------------------

  Keyframe* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Keyframe& from);
  void MergeFrom(const Keyframe& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Keyframe_Binder Binder;
  typedef Keyframe_Chain Chain;

  // accessors -------------------------------------------------------

  // repeated .bio.motions.format.proto.Keyframe.Binder binders = 3;
  inline int binders_size() const;
  inline void clear_binders();
  static const int kBindersFieldNumber = 3;
  inline const ::bio::motions::format::proto::Keyframe_Binder& binders(int index) const;
  inline ::bio::motions::format::proto::Keyframe_Binder* mutable_binders(int index);
  inline ::bio::motions::format::proto::Keyframe_Binder* add_binders();
  inline const ::google::protobuf::RepeatedPtrField< ::bio::motions::format::proto::Keyframe_Binder >&
      binders() const;
  inline ::google::protobuf::RepeatedPtrField< ::bio::motions::format::proto::Keyframe_Binder >*
      mutable_binders();

  // repeated .bio.motions.format.proto.Keyframe.Chain chains = 4;
  inline int chains_size() const;
  inline void clear_chains();
  static const int kChainsFieldNumber = 4;
  inline const ::bio::motions::format::proto::Keyframe_Chain& chains(int index) const;
  inline ::bio::motions::format::proto::Keyframe_Chain* mutable_chains(int index);
  inline ::bio::motions::format::proto::Keyframe_Chain* add_chains();
  inline const ::google::protobuf::RepeatedPtrField< ::bio::motions::format::proto::Keyframe_Chain >&
      chains() const;
  inline ::google::protobuf::RepeatedPtrField< ::bio::motions::format::proto::Keyframe_Chain >*
      mutable_chains();

  // repeated .bio.motions.format.proto.Callback callbacks = 5;
  inline int callbacks_size() const;
  inline void clear_callbacks();
  static const int kCallbacksFieldNumber = 5;
  inline const ::bio::motions::format::proto::Callback& callbacks(int index) const;
  inline ::bio::motions::format::proto::Callback* mutable_callbacks(int index);
  inline ::bio::motions::format::proto::Callback* add_callbacks();
  inline const ::google::protobuf::RepeatedPtrField< ::bio::motions::format::proto::Callback >&
      callbacks() const;
  inline ::google::protobuf::RepeatedPtrField< ::bio::motions::format::proto::Callback >*
      mutable_callbacks();

  // @@protoc_insertion_point(class_scope:bio.motions.format.proto.Keyframe)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::bio::motions::format::proto::Keyframe_Binder > binders_;
  ::google::protobuf::RepeatedPtrField< ::bio::motions::format::proto::Keyframe_Chain > chains_;
  ::google::protobuf::RepeatedPtrField< ::bio::motions::format::proto::Callback > callbacks_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static Keyframe* default_instance_;
};
// ===================================================================


// ===================================================================

// Point

// optional sint32 x = 1;
inline bool Point::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Point::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Point::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Point::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline ::google::protobuf::int32 Point::x() const {
  // @@protoc_insertion_point(field_get:bio.motions.format.proto.Point.x)
  return x_;
}
inline void Point::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:bio.motions.format.proto.Point.x)
}

// optional sint32 y = 2;
inline bool Point::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Point::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Point::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Point::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline ::google::protobuf::int32 Point::y() const {
  // @@protoc_insertion_point(field_get:bio.motions.format.proto.Point.y)
  return y_;
}
inline void Point::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:bio.motions.format.proto.Point.y)
}

// optional sint32 z = 3;
inline bool Point::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Point::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Point::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Point::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline ::google::protobuf::int32 Point::z() const {
  // @@protoc_insertion_point(field_get:bio.motions.format.proto.Point.z)
  return z_;
}
inline void Point::set_z(::google::protobuf::int32 value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:bio.motions.format.proto.Point.z)
}

// -------------------------------------------------------------------

// Callback

// optional string name = 1;
inline bool Callback::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Callback::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Callback::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Callback::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Callback::name() const {
  // @@protoc_insertion_point(field_get:bio.motions.format.proto.Callback.name)
  return *name_;
}
inline void Callback::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:bio.motions.format.proto.Callback.name)
}
inline void Callback::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:bio.motions.format.proto.Callback.name)
}
inline void Callback::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:bio.motions.format.proto.Callback.name)
}
inline ::std::string* Callback::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:bio.motions.format.proto.Callback.name)
  return name_;
}
inline ::std::string* Callback::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Callback::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:bio.motions.format.proto.Callback.name)
}

// optional .bio.motions.format.proto.Callback.Type callback_type = 2;
inline bool Callback::has_callback_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Callback::set_has_callback_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Callback::clear_has_callback_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Callback::clear_callback_type() {
  callback_type_ = 1;
  clear_has_callback_type();
}
inline ::bio::motions::format::proto::Callback_Type Callback::callback_type() const {
  // @@protoc_insertion_point(field_get:bio.motions.format.proto.Callback.callback_type)
  return static_cast< ::bio::motions::format::proto::Callback_Type >(callback_type_);
}
inline void Callback::set_callback_type(::bio::motions::format::proto::Callback_Type value) {
  assert(::bio::motions::format::proto::Callback_Type_IsValid(value));
  set_has_callback_type();
  callback_type_ = value;
  // @@protoc_insertion_point(field_set:bio.motions.format.proto.Callback.callback_type)
}

// optional int32 int_value = 3;
inline bool Callback::has_int_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Callback::set_has_int_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Callback::clear_has_int_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Callback::clear_int_value() {
  int_value_ = 0;
  clear_has_int_value();
}
inline ::google::protobuf::int32 Callback::int_value() const {
  // @@protoc_insertion_point(field_get:bio.motions.format.proto.Callback.int_value)
  return int_value_;
}
inline void Callback::set_int_value(::google::protobuf::int32 value) {
  set_has_int_value();
  int_value_ = value;
  // @@protoc_insertion_point(field_set:bio.motions.format.proto.Callback.int_value)
}

// optional double double_value = 4;
inline bool Callback::has_double_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Callback::set_has_double_value() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Callback::clear_has_double_value() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Callback::clear_double_value() {
  double_value_ = 0;
  clear_has_double_value();
}
inline double Callback::double_value() const {
  // @@protoc_insertion_point(field_get:bio.motions.format.proto.Callback.double_value)
  return double_value_;
}
inline void Callback::set_double_value(double value) {
  set_has_double_value();
  double_value_ = value;
  // @@protoc_insertion_point(field_set:bio.motions.format.proto.Callback.double_value)
}

// repeated int32 int_list_value = 5 [packed = true];
inline int Callback::int_list_value_size() const {
  return int_list_value_.size();
}
inline void Callback::clear_int_list_value() {
  int_list_value_.Clear();
}
inline ::google::protobuf::int32 Callback::int_list_value(int index) const {
  // @@protoc_insertion_point(field_get:bio.motions.format.proto.Callback.int_list_value)
  return int_list_value_.Get(index);
}
inline void Callback::set_int_list_value(int index, ::google::protobuf::int32 value) {
  int_list_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:bio.motions.format.proto.Callback.int_list_value)
}
inline void Callback::add_int_list_value(::google::protobuf::int32 value) {
  int_list_value_.Add(value);
  // @@protoc_insertion_point(field_add:bio.motions.format.proto.Callback.int_list_value)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Callback::int_list_value() const {
  // @@protoc_insertion_point(field_list:bio.motions.format.proto.Callback.int_list_value)
  return int_list_value_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Callback::mutable_int_list_value() {
  // @@protoc_insertion_point(field_mutable_list:bio.motions.format.proto.Callback.int_list_value)
  return &int_list_value_;
}

// repeated double double_list_value = 6 [packed = true];
inline int Callback::double_list_value_size() const {
  return double_list_value_.size();
}
inline void Callback::clear_double_list_value() {
  double_list_value_.Clear();
}
inline double Callback::double_list_value(int index) const {
  // @@protoc_insertion_point(field_get:bio.motions.format.proto.Callback.double_list_value)
  return double_list_value_.Get(index);
}
inline void Callback::set_double_list_value(int index, double value) {
  double_list_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:bio.motions.format.proto.Callback.double_list_value)
}
inline void Callback::add_double_list_value(double value) {
  double_list_value_.Add(value);
  // @@protoc_insertion_point(field_add:bio.motions.format.proto.Callback.double_list_value)
}
inline const ::google::protobuf::RepeatedField< double >&
Callback::double_list_value() const {
  // @@protoc_insertion_point(field_list:bio.motions.format.proto.Callback.double_list_value)
  return double_list_value_;
}
inline ::google::protobuf::RepeatedField< double >*
Callback::mutable_double_list_value() {
  // @@protoc_insertion_point(field_mutable_list:bio.motions.format.proto.Callback.double_list_value)
  return &double_list_value_;
}

// -------------------------------------------------------------------

// Header_ChainDescription_BeadDescription_Binding

// optional int32 binder_type = 1;
inline bool Header_ChainDescription_BeadDescription_Binding::has_binder_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Header_ChainDescription_BeadDescription_Binding::set_has_binder_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Header_ChainDescription_BeadDescription_Binding::clear_has_binder_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Header_ChainDescription_BeadDescription_Binding::clear_binder_type() {
  binder_type_ = 0;
  clear_has_binder_type();
}
inline ::google::protobuf::int32 Header_ChainDescription_BeadDescription_Binding::binder_type() const {
  // @@protoc_insertion_point(field_get:bio.motions.format.proto.Header.ChainDescription.BeadDescription.Binding.binder_type)
  return binder_type_;
}
inline void Header_ChainDescription_BeadDescription_Binding::set_binder_type(::google::protobuf::int32 value) {
  set_has_binder_type();
  binder_type_ = value;
  // @@protoc_insertion_point(field_set:bio.motions.format.proto.Header.ChainDescription.BeadDescription.Binding.binder_type)
}

// optional int32 force = 2;
inline bool Header_ChainDescription_BeadDescription_Binding::has_force() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Header_ChainDescription_BeadDescription_Binding::set_has_force() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Header_ChainDescription_BeadDescription_Binding::clear_has_force() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Header_ChainDescription_BeadDescription_Binding::clear_force() {
  force_ = 0;
  clear_has_force();
}
inline ::google::protobuf::int32 Header_ChainDescription_BeadDescription_Binding::force() const {
  // @@protoc_insertion_point(field_get:bio.motions.format.proto.Header.ChainDescription.BeadDescription.Binding.force)
  return force_;
}
inline void Header_ChainDescription_BeadDescription_Binding::set_force(::google::protobuf::int32 value) {
  set_has_force();
  force_ = value;
  // @@protoc_insertion_point(field_set:bio.motions.format.proto.Header.ChainDescription.BeadDescription.Binding.force)
}

// -------------------------------------------------------------------

// Header_ChainDescription_BeadDescription

// repeated .bio.motions.format.proto.Header.ChainDescription.BeadDescription.Binding energy_vector = 1;
inline int Header_ChainDescription_BeadDescription::energy_vector_size() const {
  return energy_vector_.size();
}
inline void Header_ChainDescription_BeadDescription::clear_energy_vector() {
  energy_vector_.Clear();
}
inline const ::bio::motions::format::proto::Header_ChainDescription_BeadDescription_Binding& Header_ChainDescription_BeadDescription::energy_vector(int index) const {
  // @@protoc_insertion_point(field_get:bio.motions.format.proto.Header.ChainDescription.BeadDescription.energy_vector)
  return energy_vector_.Get(index);
}
inline ::bio::motions::format::proto::Header_ChainDescription_BeadDescription_Binding* Header_ChainDescription_BeadDescription::mutable_energy_vector(int index) {
  // @@protoc_insertion_point(field_mutable:bio.motions.format.proto.Header.ChainDescription.BeadDescription.energy_vector)
  return energy_vector_.Mutable(index);
}
inline ::bio::motions::format::proto::Header_ChainDescription_BeadDescription_Binding* Header_ChainDescription_BeadDescription::add_energy_vector() {
  // @@protoc_insertion_point(field_add:bio.motions.format.proto.Header.ChainDescription.BeadDescription.energy_vector)
  return energy_vector_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bio::motions::format::proto::Header_ChainDescription_BeadDescription_Binding >&
Header_ChainDescription_BeadDescription::energy_vector() const {
  // @@protoc_insertion_point(field_list:bio.motions.format.proto.Header.ChainDescription.BeadDescription.energy_vector)
  return energy_vector_;
}
inline ::google::protobuf::RepeatedPtrField< ::bio::motions::format::proto::Header_ChainDescription_BeadDescription_Binding >*
Header_ChainDescription_BeadDescription::mutable_energy_vector() {
  // @@protoc_insertion_point(field_mutable_list:bio.motions.format.proto.Header.ChainDescription.BeadDescription.energy_vector)
  return &energy_vector_;
}

// -------------------------------------------------------------------

// Header_ChainDescription

// optional string chain_name = 1;
inline bool Header_ChainDescription::has_chain_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Header_ChainDescription::set_has_chain_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Header_ChainDescription::clear_has_chain_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Header_ChainDescription::clear_chain_name() {
  if (chain_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    chain_name_->clear();
  }
  clear_has_chain_name();
}
inline const ::std::string& Header_ChainDescription::chain_name() const {
  // @@protoc_insertion_point(field_get:bio.motions.format.proto.Header.ChainDescription.chain_name)
  return *chain_name_;
}
inline void Header_ChainDescription::set_chain_name(const ::std::string& value) {
  set_has_chain_name();
  if (chain_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    chain_name_ = new ::std::string;
  }
  chain_name_->assign(value);
  // @@protoc_insertion_point(field_set:bio.motions.format.proto.Header.ChainDescription.chain_name)
}
inline void Header_ChainDescription::set_chain_name(const char* value) {
  set_has_chain_name();
  if (chain_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    chain_name_ = new ::std::string;
  }
  chain_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:bio.motions.format.proto.Header.ChainDescription.chain_name)
}
inline void Header_ChainDescription::set_chain_name(const char* value, size_t size) {
  set_has_chain_name();
  if (chain_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    chain_name_ = new ::std::string;
  }
  chain_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:bio.motions.format.proto.Header.ChainDescription.chain_name)
}
inline ::std::string* Header_ChainDescription::mutable_chain_name() {
  set_has_chain_name();
  if (chain_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    chain_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:bio.motions.format.proto.Header.ChainDescription.chain_name)
  return chain_name_;
}
inline ::std::string* Header_ChainDescription::release_chain_name() {
  clear_has_chain_name();
  if (chain_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = chain_name_;
    chain_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Header_ChainDescription::set_allocated_chain_name(::std::string* chain_name) {
  if (chain_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete chain_name_;
  }
  if (chain_name) {
    set_has_chain_name();
    chain_name_ = chain_name;
  } else {
    clear_has_chain_name();
    chain_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:bio.motions.format.proto.Header.ChainDescription.chain_name)
}

// repeated .bio.motions.format.proto.Header.ChainDescription.BeadDescription beads = 2;
inline int Header_ChainDescription::beads_size() const {
  return beads_.size();
}
inline void Header_ChainDescription::clear_beads() {
  beads_.Clear();
}
inline const ::bio::motions::format::proto::Header_ChainDescription_BeadDescription& Header_ChainDescription::beads(int index) const {
  // @@protoc_insertion_point(field_get:bio.motions.format.proto.Header.ChainDescription.beads)
  return beads_.Get(index);
}
inline ::bio::motions::format::proto::Header_ChainDescription_BeadDescription* Header_ChainDescription::mutable_beads(int index) {
  // @@protoc_insertion_point(field_mutable:bio.motions.format.proto.Header.ChainDescription.beads)
  return beads_.Mutable(index);
}
inline ::bio::motions::format::proto::Header_ChainDescription_BeadDescription* Header_ChainDescription::add_beads() {
  // @@protoc_insertion_point(field_add:bio.motions.format.proto.Header.ChainDescription.beads)
  return beads_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bio::motions::format::proto::Header_ChainDescription_BeadDescription >&
Header_ChainDescription::beads() const {
  // @@protoc_insertion_point(field_list:bio.motions.format.proto.Header.ChainDescription.beads)
  return beads_;
}
inline ::google::protobuf::RepeatedPtrField< ::bio::motions::format::proto::Header_ChainDescription_BeadDescription >*
Header_ChainDescription::mutable_beads() {
  // @@protoc_insertion_point(field_mutable_list:bio.motions.format.proto.Header.ChainDescription.beads)
  return &beads_;
}

// -------------------------------------------------------------------

// Header

// optional string simulation_name = 1;
inline bool Header::has_simulation_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Header::set_has_simulation_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Header::clear_has_simulation_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Header::clear_simulation_name() {
  if (simulation_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    simulation_name_->clear();
  }
  clear_has_simulation_name();
}
inline const ::std::string& Header::simulation_name() const {
  // @@protoc_insertion_point(field_get:bio.motions.format.proto.Header.simulation_name)
  return *simulation_name_;
}
inline void Header::set_simulation_name(const ::std::string& value) {
  set_has_simulation_name();
  if (simulation_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    simulation_name_ = new ::std::string;
  }
  simulation_name_->assign(value);
  // @@protoc_insertion_point(field_set:bio.motions.format.proto.Header.simulation_name)
}
inline void Header::set_simulation_name(const char* value) {
  set_has_simulation_name();
  if (simulation_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    simulation_name_ = new ::std::string;
  }
  simulation_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:bio.motions.format.proto.Header.simulation_name)
}
inline void Header::set_simulation_name(const char* value, size_t size) {
  set_has_simulation_name();
  if (simulation_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    simulation_name_ = new ::std::string;
  }
  simulation_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:bio.motions.format.proto.Header.simulation_name)
}
inline ::std::string* Header::mutable_simulation_name() {
  set_has_simulation_name();
  if (simulation_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    simulation_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:bio.motions.format.proto.Header.simulation_name)
  return simulation_name_;
}
inline ::std::string* Header::release_simulation_name() {
  clear_has_simulation_name();
  if (simulation_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = simulation_name_;
    simulation_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Header::set_allocated_simulation_name(::std::string* simulation_name) {
  if (simulation_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete simulation_name_;
  }
  if (simulation_name) {
    set_has_simulation_name();
    simulation_name_ = simulation_name;
  } else {
    clear_has_simulation_name();
    simulation_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:bio.motions.format.proto.Header.simulation_name)
}

// optional string simulation_description = 2;
inline bool Header::has_simulation_description() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Header::set_has_simulation_description() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Header::clear_has_simulation_description() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Header::clear_simulation_description() {
  if (simulation_description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    simulation_description_->clear();
  }
  clear_has_simulation_description();
}
inline const ::std::string& Header::simulation_description() const {
  // @@protoc_insertion_point(field_get:bio.motions.format.proto.Header.simulation_description)
  return *simulation_description_;
}
inline void Header::set_simulation_description(const ::std::string& value) {
  set_has_simulation_description();
  if (simulation_description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    simulation_description_ = new ::std::string;
  }
  simulation_description_->assign(value);
  // @@protoc_insertion_point(field_set:bio.motions.format.proto.Header.simulation_description)
}
inline void Header::set_simulation_description(const char* value) {
  set_has_simulation_description();
  if (simulation_description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    simulation_description_ = new ::std::string;
  }
  simulation_description_->assign(value);
  // @@protoc_insertion_point(field_set_char:bio.motions.format.proto.Header.simulation_description)
}
inline void Header::set_simulation_description(const char* value, size_t size) {
  set_has_simulation_description();
  if (simulation_description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    simulation_description_ = new ::std::string;
  }
  simulation_description_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:bio.motions.format.proto.Header.simulation_description)
}
inline ::std::string* Header::mutable_simulation_description() {
  set_has_simulation_description();
  if (simulation_description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    simulation_description_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:bio.motions.format.proto.Header.simulation_description)
  return simulation_description_;
}
inline ::std::string* Header::release_simulation_description() {
  clear_has_simulation_description();
  if (simulation_description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = simulation_description_;
    simulation_description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Header::set_allocated_simulation_description(::std::string* simulation_description) {
  if (simulation_description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete simulation_description_;
  }
  if (simulation_description) {
    set_has_simulation_description();
    simulation_description_ = simulation_description;
  } else {
    clear_has_simulation_description();
    simulation_description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:bio.motions.format.proto.Header.simulation_description)
}

// optional int32 binders_types_count = 3;
inline bool Header::has_binders_types_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Header::set_has_binders_types_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Header::clear_has_binders_types_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Header::clear_binders_types_count() {
  binders_types_count_ = 0;
  clear_has_binders_types_count();
}
inline ::google::protobuf::int32 Header::binders_types_count() const {
  // @@protoc_insertion_point(field_get:bio.motions.format.proto.Header.binders_types_count)
  return binders_types_count_;
}
inline void Header::set_binders_types_count(::google::protobuf::int32 value) {
  set_has_binders_types_count();
  binders_types_count_ = value;
  // @@protoc_insertion_point(field_set:bio.motions.format.proto.Header.binders_types_count)
}

// repeated .bio.motions.format.proto.Header.ChainDescription chains = 5;
inline int Header::chains_size() const {
  return chains_.size();
}
inline void Header::clear_chains() {
  chains_.Clear();
}
inline const ::bio::motions::format::proto::Header_ChainDescription& Header::chains(int index) const {
  // @@protoc_insertion_point(field_get:bio.motions.format.proto.Header.chains)
  return chains_.Get(index);
}
inline ::bio::motions::format::proto::Header_ChainDescription* Header::mutable_chains(int index) {
  // @@protoc_insertion_point(field_mutable:bio.motions.format.proto.Header.chains)
  return chains_.Mutable(index);
}
inline ::bio::motions::format::proto::Header_ChainDescription* Header::add_chains() {
  // @@protoc_insertion_point(field_add:bio.motions.format.proto.Header.chains)
  return chains_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bio::motions::format::proto::Header_ChainDescription >&
Header::chains() const {
  // @@protoc_insertion_point(field_list:bio.motions.format.proto.Header.chains)
  return chains_;
}
inline ::google::protobuf::RepeatedPtrField< ::bio::motions::format::proto::Header_ChainDescription >*
Header::mutable_chains() {
  // @@protoc_insertion_point(field_mutable_list:bio.motions.format.proto.Header.chains)
  return &chains_;
}

// -------------------------------------------------------------------

// Delta

// optional .bio.motions.format.proto.Point from = 1;
inline bool Delta::has_from() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Delta::set_has_from() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Delta::clear_has_from() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Delta::clear_from() {
  if (from_ != NULL) from_->::bio::motions::format::proto::Point::Clear();
  clear_has_from();
}
inline const ::bio::motions::format::proto::Point& Delta::from() const {
  // @@protoc_insertion_point(field_get:bio.motions.format.proto.Delta.from)
  return from_ != NULL ? *from_ : *default_instance_->from_;
}
inline ::bio::motions::format::proto::Point* Delta::mutable_from() {
  set_has_from();
  if (from_ == NULL) from_ = new ::bio::motions::format::proto::Point;
  // @@protoc_insertion_point(field_mutable:bio.motions.format.proto.Delta.from)
  return from_;
}
inline ::bio::motions::format::proto::Point* Delta::release_from() {
  clear_has_from();
  ::bio::motions::format::proto::Point* temp = from_;
  from_ = NULL;
  return temp;
}
inline void Delta::set_allocated_from(::bio::motions::format::proto::Point* from) {
  delete from_;
  from_ = from;
  if (from) {
    set_has_from();
  } else {
    clear_has_from();
  }
  // @@protoc_insertion_point(field_set_allocated:bio.motions.format.proto.Delta.from)
}

// optional .bio.motions.format.proto.Point disp = 2;
inline bool Delta::has_disp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Delta::set_has_disp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Delta::clear_has_disp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Delta::clear_disp() {
  if (disp_ != NULL) disp_->::bio::motions::format::proto::Point::Clear();
  clear_has_disp();
}
inline const ::bio::motions::format::proto::Point& Delta::disp() const {
  // @@protoc_insertion_point(field_get:bio.motions.format.proto.Delta.disp)
  return disp_ != NULL ? *disp_ : *default_instance_->disp_;
}
inline ::bio::motions::format::proto::Point* Delta::mutable_disp() {
  set_has_disp();
  if (disp_ == NULL) disp_ = new ::bio::motions::format::proto::Point;
  // @@protoc_insertion_point(field_mutable:bio.motions.format.proto.Delta.disp)
  return disp_;
}
inline ::bio::motions::format::proto::Point* Delta::release_disp() {
  clear_has_disp();
  ::bio::motions::format::proto::Point* temp = disp_;
  disp_ = NULL;
  return temp;
}
inline void Delta::set_allocated_disp(::bio::motions::format::proto::Point* disp) {
  delete disp_;
  disp_ = disp;
  if (disp) {
    set_has_disp();
  } else {
    clear_has_disp();
  }
  // @@protoc_insertion_point(field_set_allocated:bio.motions.format.proto.Delta.disp)
}

// repeated .bio.motions.format.proto.Callback callbacks = 3;
inline int Delta::callbacks_size() const {
  return callbacks_.size();
}
inline void Delta::clear_callbacks() {
  callbacks_.Clear();
}
inline const ::bio::motions::format::proto::Callback& Delta::callbacks(int index) const {
  // @@protoc_insertion_point(field_get:bio.motions.format.proto.Delta.callbacks)
  return callbacks_.Get(index);
}
inline ::bio::motions::format::proto::Callback* Delta::mutable_callbacks(int index) {
  // @@protoc_insertion_point(field_mutable:bio.motions.format.proto.Delta.callbacks)
  return callbacks_.Mutable(index);
}
inline ::bio::motions::format::proto::Callback* Delta::add_callbacks() {
  // @@protoc_insertion_point(field_add:bio.motions.format.proto.Delta.callbacks)
  return callbacks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bio::motions::format::proto::Callback >&
Delta::callbacks() const {
  // @@protoc_insertion_point(field_list:bio.motions.format.proto.Delta.callbacks)
  return callbacks_;
}
inline ::google::protobuf::RepeatedPtrField< ::bio::motions::format::proto::Callback >*
Delta::mutable_callbacks() {
  // @@protoc_insertion_point(field_mutable_list:bio.motions.format.proto.Delta.callbacks)
  return &callbacks_;
}

// -------------------------------------------------------------------

// Keyframe_Binder

// optional int32 binder_type = 1;
inline bool Keyframe_Binder::has_binder_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Keyframe_Binder::set_has_binder_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Keyframe_Binder::clear_has_binder_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Keyframe_Binder::clear_binder_type() {
  binder_type_ = 0;
  clear_has_binder_type();
}
inline ::google::protobuf::int32 Keyframe_Binder::binder_type() const {
  // @@protoc_insertion_point(field_get:bio.motions.format.proto.Keyframe.Binder.binder_type)
  return binder_type_;
}
inline void Keyframe_Binder::set_binder_type(::google::protobuf::int32 value) {
  set_has_binder_type();
  binder_type_ = value;
  // @@protoc_insertion_point(field_set:bio.motions.format.proto.Keyframe.Binder.binder_type)
}

// optional .bio.motions.format.proto.Point position = 2;
inline bool Keyframe_Binder::has_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Keyframe_Binder::set_has_position() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Keyframe_Binder::clear_has_position() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Keyframe_Binder::clear_position() {
  if (position_ != NULL) position_->::bio::motions::format::proto::Point::Clear();
  clear_has_position();
}
inline const ::bio::motions::format::proto::Point& Keyframe_Binder::position() const {
  // @@protoc_insertion_point(field_get:bio.motions.format.proto.Keyframe.Binder.position)
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
inline ::bio::motions::format::proto::Point* Keyframe_Binder::mutable_position() {
  set_has_position();
  if (position_ == NULL) position_ = new ::bio::motions::format::proto::Point;
  // @@protoc_insertion_point(field_mutable:bio.motions.format.proto.Keyframe.Binder.position)
  return position_;
}
inline ::bio::motions::format::proto::Point* Keyframe_Binder::release_position() {
  clear_has_position();
  ::bio::motions::format::proto::Point* temp = position_;
  position_ = NULL;
  return temp;
}
inline void Keyframe_Binder::set_allocated_position(::bio::motions::format::proto::Point* position) {
  delete position_;
  position_ = position;
  if (position) {
    set_has_position();
  } else {
    clear_has_position();
  }
  // @@protoc_insertion_point(field_set_allocated:bio.motions.format.proto.Keyframe.Binder.position)
}

// -------------------------------------------------------------------

// Keyframe_Chain

// repeated .bio.motions.format.proto.Point bead_positions = 1;
inline int Keyframe_Chain::bead_positions_size() const {
  return bead_positions_.size();
}
inline void Keyframe_Chain::clear_bead_positions() {
  bead_positions_.Clear();
}
inline const ::bio::motions::format::proto::Point& Keyframe_Chain::bead_positions(int index) const {
  // @@protoc_insertion_point(field_get:bio.motions.format.proto.Keyframe.Chain.bead_positions)
  return bead_positions_.Get(index);
}
inline ::bio::motions::format::proto::Point* Keyframe_Chain::mutable_bead_positions(int index) {
  // @@protoc_insertion_point(field_mutable:bio.motions.format.proto.Keyframe.Chain.bead_positions)
  return bead_positions_.Mutable(index);
}
inline ::bio::motions::format::proto::Point* Keyframe_Chain::add_bead_positions() {
  // @@protoc_insertion_point(field_add:bio.motions.format.proto.Keyframe.Chain.bead_positions)
  return bead_positions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bio::motions::format::proto::Point >&
Keyframe_Chain::bead_positions() const {
  // @@protoc_insertion_point(field_list:bio.motions.format.proto.Keyframe.Chain.bead_positions)
  return bead_positions_;
}
inline ::google::protobuf::RepeatedPtrField< ::bio::motions::format::proto::Point >*
Keyframe_Chain::mutable_bead_positions() {
  // @@protoc_insertion_point(field_mutable_list:bio.motions.format.proto.Keyframe.Chain.bead_positions)
  return &bead_positions_;
}

// -------------------------------------------------------------------

// Keyframe

// repeated .bio.motions.format.proto.Keyframe.Binder binders = 3;
inline int Keyframe::binders_size() const {
  return binders_.size();
}
inline void Keyframe::clear_binders() {
  binders_.Clear();
}
inline const ::bio::motions::format::proto::Keyframe_Binder& Keyframe::binders(int index) const {
  // @@protoc_insertion_point(field_get:bio.motions.format.proto.Keyframe.binders)
  return binders_.Get(index);
}
inline ::bio::motions::format::proto::Keyframe_Binder* Keyframe::mutable_binders(int index) {
  // @@protoc_insertion_point(field_mutable:bio.motions.format.proto.Keyframe.binders)
  return binders_.Mutable(index);
}
inline ::bio::motions::format::proto::Keyframe_Binder* Keyframe::add_binders() {
  // @@protoc_insertion_point(field_add:bio.motions.format.proto.Keyframe.binders)
  return binders_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bio::motions::format::proto::Keyframe_Binder >&
Keyframe::binders() const {
  // @@protoc_insertion_point(field_list:bio.motions.format.proto.Keyframe.binders)
  return binders_;
}
inline ::google::protobuf::RepeatedPtrField< ::bio::motions::format::proto::Keyframe_Binder >*
Keyframe::mutable_binders() {
  // @@protoc_insertion_point(field_mutable_list:bio.motions.format.proto.Keyframe.binders)
  return &binders_;
}

// repeated .bio.motions.format.proto.Keyframe.Chain chains = 4;
inline int Keyframe::chains_size() const {
  return chains_.size();
}
inline void Keyframe::clear_chains() {
  chains_.Clear();
}
inline const ::bio::motions::format::proto::Keyframe_Chain& Keyframe::chains(int index) const {
  // @@protoc_insertion_point(field_get:bio.motions.format.proto.Keyframe.chains)
  return chains_.Get(index);
}
inline ::bio::motions::format::proto::Keyframe_Chain* Keyframe::mutable_chains(int index) {
  // @@protoc_insertion_point(field_mutable:bio.motions.format.proto.Keyframe.chains)
  return chains_.Mutable(index);
}
inline ::bio::motions::format::proto::Keyframe_Chain* Keyframe::add_chains() {
  // @@protoc_insertion_point(field_add:bio.motions.format.proto.Keyframe.chains)
  return chains_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bio::motions::format::proto::Keyframe_Chain >&
Keyframe::chains() const {
  // @@protoc_insertion_point(field_list:bio.motions.format.proto.Keyframe.chains)
  return chains_;
}
inline ::google::protobuf::RepeatedPtrField< ::bio::motions::format::proto::Keyframe_Chain >*
Keyframe::mutable_chains() {
  // @@protoc_insertion_point(field_mutable_list:bio.motions.format.proto.Keyframe.chains)
  return &chains_;
}

// repeated .bio.motions.format.proto.Callback callbacks = 5;
inline int Keyframe::callbacks_size() const {
  return callbacks_.size();
}
inline void Keyframe::clear_callbacks() {
  callbacks_.Clear();
}
inline const ::bio::motions::format::proto::Callback& Keyframe::callbacks(int index) const {
  // @@protoc_insertion_point(field_get:bio.motions.format.proto.Keyframe.callbacks)
  return callbacks_.Get(index);
}
inline ::bio::motions::format::proto::Callback* Keyframe::mutable_callbacks(int index) {
  // @@protoc_insertion_point(field_mutable:bio.motions.format.proto.Keyframe.callbacks)
  return callbacks_.Mutable(index);
}
inline ::bio::motions::format::proto::Callback* Keyframe::add_callbacks() {
  // @@protoc_insertion_point(field_add:bio.motions.format.proto.Keyframe.callbacks)
  return callbacks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bio::motions::format::proto::Callback >&
Keyframe::callbacks() const {
  // @@protoc_insertion_point(field_list:bio.motions.format.proto.Keyframe.callbacks)
  return callbacks_;
}
inline ::google::protobuf::RepeatedPtrField< ::bio::motions::format::proto::Callback >*
Keyframe::mutable_callbacks() {
  // @@protoc_insertion_point(field_mutable_list:bio.motions.format.proto.Keyframe.callbacks)
  return &callbacks_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace format
}  // namespace motions
}  // namespace bio

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::bio::motions::format::proto::Callback_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bio::motions::format::proto::Callback_Type>() {
  return ::bio::motions::format::proto::Callback_Type_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_message_2eproto__INCLUDED
