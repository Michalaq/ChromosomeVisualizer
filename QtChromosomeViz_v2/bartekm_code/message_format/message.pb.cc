// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace bio {
namespace motions {
namespace format {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* Point_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Point_reflection_ = NULL;
const ::google::protobuf::Descriptor* Callback_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Callback_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Callback_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Header_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Header_reflection_ = NULL;
const ::google::protobuf::Descriptor* Header_ChainDescription_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Header_ChainDescription_reflection_ = NULL;
const ::google::protobuf::Descriptor* Header_ChainDescription_BeadDescription_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Header_ChainDescription_BeadDescription_reflection_ = NULL;
const ::google::protobuf::Descriptor* Header_ChainDescription_BeadDescription_Binding_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Header_ChainDescription_BeadDescription_Binding_reflection_ = NULL;
const ::google::protobuf::Descriptor* Delta_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Delta_reflection_ = NULL;
const ::google::protobuf::Descriptor* Keyframe_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Keyframe_reflection_ = NULL;
const ::google::protobuf::Descriptor* Keyframe_Binder_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Keyframe_Binder_reflection_ = NULL;
const ::google::protobuf::Descriptor* Keyframe_Chain_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Keyframe_Chain_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_message_2eproto() {
  protobuf_AddDesc_message_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "message.proto");
  GOOGLE_CHECK(file != NULL);
  Point_descriptor_ = file->message_type(0);
  static const int Point_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, z_),
  };
  Point_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Point_descriptor_,
      Point::default_instance_,
      Point_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Point));
  Callback_descriptor_ = file->message_type(1);
  static const int Callback_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Callback, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Callback, callback_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Callback, int_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Callback, double_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Callback, int_list_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Callback, double_list_value_),
  };
  Callback_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Callback_descriptor_,
      Callback::default_instance_,
      Callback_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Callback, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Callback, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Callback));
  Callback_Type_descriptor_ = Callback_descriptor_->enum_type(0);
  Header_descriptor_ = file->message_type(2);
  static const int Header_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, simulation_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, simulation_description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, binders_types_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, chains_),
  };
  Header_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Header_descriptor_,
      Header::default_instance_,
      Header_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Header));
  Header_ChainDescription_descriptor_ = Header_descriptor_->nested_type(0);
  static const int Header_ChainDescription_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header_ChainDescription, chain_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header_ChainDescription, beads_),
  };
  Header_ChainDescription_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Header_ChainDescription_descriptor_,
      Header_ChainDescription::default_instance_,
      Header_ChainDescription_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header_ChainDescription, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header_ChainDescription, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Header_ChainDescription));
  Header_ChainDescription_BeadDescription_descriptor_ = Header_ChainDescription_descriptor_->nested_type(0);
  static const int Header_ChainDescription_BeadDescription_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header_ChainDescription_BeadDescription, energy_vector_),
  };
  Header_ChainDescription_BeadDescription_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Header_ChainDescription_BeadDescription_descriptor_,
      Header_ChainDescription_BeadDescription::default_instance_,
      Header_ChainDescription_BeadDescription_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header_ChainDescription_BeadDescription, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header_ChainDescription_BeadDescription, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Header_ChainDescription_BeadDescription));
  Header_ChainDescription_BeadDescription_Binding_descriptor_ = Header_ChainDescription_BeadDescription_descriptor_->nested_type(0);
  static const int Header_ChainDescription_BeadDescription_Binding_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header_ChainDescription_BeadDescription_Binding, binder_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header_ChainDescription_BeadDescription_Binding, force_),
  };
  Header_ChainDescription_BeadDescription_Binding_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Header_ChainDescription_BeadDescription_Binding_descriptor_,
      Header_ChainDescription_BeadDescription_Binding::default_instance_,
      Header_ChainDescription_BeadDescription_Binding_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header_ChainDescription_BeadDescription_Binding, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header_ChainDescription_BeadDescription_Binding, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Header_ChainDescription_BeadDescription_Binding));
  Delta_descriptor_ = file->message_type(3);
  static const int Delta_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Delta, from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Delta, disp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Delta, callbacks_),
  };
  Delta_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Delta_descriptor_,
      Delta::default_instance_,
      Delta_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Delta, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Delta, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Delta));
  Keyframe_descriptor_ = file->message_type(4);
  static const int Keyframe_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Keyframe, binders_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Keyframe, chains_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Keyframe, callbacks_),
  };
  Keyframe_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Keyframe_descriptor_,
      Keyframe::default_instance_,
      Keyframe_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Keyframe, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Keyframe, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Keyframe));
  Keyframe_Binder_descriptor_ = Keyframe_descriptor_->nested_type(0);
  static const int Keyframe_Binder_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Keyframe_Binder, binder_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Keyframe_Binder, position_),
  };
  Keyframe_Binder_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Keyframe_Binder_descriptor_,
      Keyframe_Binder::default_instance_,
      Keyframe_Binder_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Keyframe_Binder, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Keyframe_Binder, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Keyframe_Binder));
  Keyframe_Chain_descriptor_ = Keyframe_descriptor_->nested_type(1);
  static const int Keyframe_Chain_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Keyframe_Chain, bead_positions_),
  };
  Keyframe_Chain_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Keyframe_Chain_descriptor_,
      Keyframe_Chain::default_instance_,
      Keyframe_Chain_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Keyframe_Chain, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Keyframe_Chain, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Keyframe_Chain));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_message_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Point_descriptor_, &Point::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Callback_descriptor_, &Callback::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Header_descriptor_, &Header::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Header_ChainDescription_descriptor_, &Header_ChainDescription::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Header_ChainDescription_BeadDescription_descriptor_, &Header_ChainDescription_BeadDescription::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Header_ChainDescription_BeadDescription_Binding_descriptor_, &Header_ChainDescription_BeadDescription_Binding::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Delta_descriptor_, &Delta::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Keyframe_descriptor_, &Keyframe::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Keyframe_Binder_descriptor_, &Keyframe_Binder::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Keyframe_Chain_descriptor_, &Keyframe_Chain::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_message_2eproto() {
  delete Point::default_instance_;
  delete Point_reflection_;
  delete Callback::default_instance_;
  delete Callback_reflection_;
  delete Header::default_instance_;
  delete Header_reflection_;
  delete Header_ChainDescription::default_instance_;
  delete Header_ChainDescription_reflection_;
  delete Header_ChainDescription_BeadDescription::default_instance_;
  delete Header_ChainDescription_BeadDescription_reflection_;
  delete Header_ChainDescription_BeadDescription_Binding::default_instance_;
  delete Header_ChainDescription_BeadDescription_Binding_reflection_;
  delete Delta::default_instance_;
  delete Delta_reflection_;
  delete Keyframe::default_instance_;
  delete Keyframe_reflection_;
  delete Keyframe_Binder::default_instance_;
  delete Keyframe_Binder_reflection_;
  delete Keyframe_Chain::default_instance_;
  delete Keyframe_Chain_reflection_;
}

void protobuf_AddDesc_message_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rmessage.proto\022\030bio.motions.format.prot"
    "o\"(\n\005Point\022\t\n\001x\030\001 \001(\021\022\t\n\001y\030\002 \001(\021\022\t\n\001z\030\003 "
    "\001(\021\"\370\001\n\010Callback\022\014\n\004name\030\001 \001(\t\022>\n\rcallba"
    "ck_type\030\002 \001(\0162\'.bio.motions.format.proto"
    ".Callback.Type\022\021\n\tint_value\030\003 \001(\005\022\024\n\014dou"
    "ble_value\030\004 \001(\001\022\032\n\016int_list_value\030\005 \003(\005B"
    "\002\020\001\022\035\n\021double_list_value\030\006 \003(\001B\002\020\001\":\n\004Ty"
    "pe\022\007\n\003INT\020\001\022\n\n\006DOUBLE\020\002\022\014\n\010INT_LIST\020\003\022\017\n"
    "\013DOUBLE_LIST\020\004\"\301\003\n\006Header\022\027\n\017simulation_"
    "name\030\001 \001(\t\022\036\n\026simulation_description\030\002 \001"
    "(\t\022\033\n\023binders_types_count\030\003 \001(\005\022A\n\006chain"
    "s\030\005 \003(\01321.bio.motions.format.proto.Heade"
    "r.ChainDescription\032\235\002\n\020ChainDescription\022"
    "\022\n\nchain_name\030\001 \001(\t\022P\n\005beads\030\002 \003(\0132A.bio"
    ".motions.format.proto.Header.ChainDescri"
    "ption.BeadDescription\032\242\001\n\017BeadDescriptio"
    "n\022`\n\renergy_vector\030\001 \003(\0132I.bio.motions.f"
    "ormat.proto.Header.ChainDescription.Bead"
    "Description.Binding\032-\n\007Binding\022\023\n\013binder"
    "_type\030\001 \001(\005\022\r\n\005force\030\002 \001(\005\"\234\001\n\005Delta\022-\n\004"
    "from\030\001 \001(\0132\037.bio.motions.format.proto.Po"
    "int\022-\n\004disp\030\002 \001(\0132\037.bio.motions.format.p"
    "roto.Point\0225\n\tcallbacks\030\003 \003(\0132\".bio.moti"
    "ons.format.proto.Callback\"\313\002\n\010Keyframe\022:"
    "\n\007binders\030\003 \003(\0132).bio.motions.format.pro"
    "to.Keyframe.Binder\0228\n\006chains\030\004 \003(\0132(.bio"
    ".motions.format.proto.Keyframe.Chain\0225\n\t"
    "callbacks\030\005 \003(\0132\".bio.motions.format.pro"
    "to.Callback\032P\n\006Binder\022\023\n\013binder_type\030\001 \001"
    "(\005\0221\n\010position\030\002 \001(\0132\037.bio.motions.forma"
    "t.proto.Point\032@\n\005Chain\0227\n\016bead_positions"
    "\030\001 \003(\0132\037.bio.motions.format.proto.Point", 1279);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "message.proto", &protobuf_RegisterTypes);
  Point::default_instance_ = new Point();
  Callback::default_instance_ = new Callback();
  Header::default_instance_ = new Header();
  Header_ChainDescription::default_instance_ = new Header_ChainDescription();
  Header_ChainDescription_BeadDescription::default_instance_ = new Header_ChainDescription_BeadDescription();
  Header_ChainDescription_BeadDescription_Binding::default_instance_ = new Header_ChainDescription_BeadDescription_Binding();
  Delta::default_instance_ = new Delta();
  Keyframe::default_instance_ = new Keyframe();
  Keyframe_Binder::default_instance_ = new Keyframe_Binder();
  Keyframe_Chain::default_instance_ = new Keyframe_Chain();
  Point::default_instance_->InitAsDefaultInstance();
  Callback::default_instance_->InitAsDefaultInstance();
  Header::default_instance_->InitAsDefaultInstance();
  Header_ChainDescription::default_instance_->InitAsDefaultInstance();
  Header_ChainDescription_BeadDescription::default_instance_->InitAsDefaultInstance();
  Header_ChainDescription_BeadDescription_Binding::default_instance_->InitAsDefaultInstance();
  Delta::default_instance_->InitAsDefaultInstance();
  Keyframe::default_instance_->InitAsDefaultInstance();
  Keyframe_Binder::default_instance_->InitAsDefaultInstance();
  Keyframe_Chain::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_message_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_message_2eproto {
  StaticDescriptorInitializer_message_2eproto() {
    protobuf_AddDesc_message_2eproto();
  }
} static_descriptor_initializer_message_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Point::kXFieldNumber;
const int Point::kYFieldNumber;
const int Point::kZFieldNumber;
#endif  // !_MSC_VER

Point::Point()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bio.motions.format.proto.Point)
}

void Point::InitAsDefaultInstance() {
}

Point::Point(const Point& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bio.motions.format.proto.Point)
}

void Point::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Point::~Point() {
  // @@protoc_insertion_point(destructor:bio.motions.format.proto.Point)
  SharedDtor();
}

void Point::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Point::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Point::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Point_descriptor_;
}

const Point& Point::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

Point* Point::default_instance_ = NULL;

Point* Point::New() const {
  return new Point;
}

void Point::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Point*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(x_, z_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Point::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bio.motions.format.proto.Point)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 x = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }

      // optional sint32 y = 2;
      case 2: {
        if (tag == 16) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_z;
        break;
      }

      // optional sint32 z = 3;
      case 3: {
        if (tag == 24) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bio.motions.format.proto.Point)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bio.motions.format.proto.Point)
  return false;
#undef DO_
}

void Point::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bio.motions.format.proto.Point)
  // optional sint32 x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->x(), output);
  }

  // optional sint32 y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->y(), output);
  }

  // optional sint32 z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->z(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bio.motions.format.proto.Point)
}

::google::protobuf::uint8* Point::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bio.motions.format.proto.Point)
  // optional sint32 x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->x(), target);
  }

  // optional sint32 y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->y(), target);
  }

  // optional sint32 z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->z(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bio.motions.format.proto.Point)
  return target;
}

int Point::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->x());
    }

    // optional sint32 y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->y());
    }

    // optional sint32 z = 3;
    if (has_z()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->z());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Point::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Point* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Point*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Point::MergeFrom(const Point& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Point::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point::CopyFrom(const Point& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {

  return true;
}

void Point::Swap(Point* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Point::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Point_descriptor_;
  metadata.reflection = Point_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Callback_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Callback_Type_descriptor_;
}
bool Callback_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Callback_Type Callback::INT;
const Callback_Type Callback::DOUBLE;
const Callback_Type Callback::INT_LIST;
const Callback_Type Callback::DOUBLE_LIST;
const Callback_Type Callback::Type_MIN;
const Callback_Type Callback::Type_MAX;
const int Callback::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Callback::kNameFieldNumber;
const int Callback::kCallbackTypeFieldNumber;
const int Callback::kIntValueFieldNumber;
const int Callback::kDoubleValueFieldNumber;
const int Callback::kIntListValueFieldNumber;
const int Callback::kDoubleListValueFieldNumber;
#endif  // !_MSC_VER

Callback::Callback()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bio.motions.format.proto.Callback)
}

void Callback::InitAsDefaultInstance() {
}

Callback::Callback(const Callback& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bio.motions.format.proto.Callback)
}

void Callback::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  callback_type_ = 1;
  int_value_ = 0;
  double_value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Callback::~Callback() {
  // @@protoc_insertion_point(destructor:bio.motions.format.proto.Callback)
  SharedDtor();
}

void Callback::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Callback::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Callback::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Callback_descriptor_;
}

const Callback& Callback::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

Callback* Callback::default_instance_ = NULL;

Callback* Callback::New() const {
  return new Callback;
}

void Callback::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Callback*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(int_value_, double_value_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    callback_type_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  int_list_value_.Clear();
  double_list_value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Callback::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bio.motions.format.proto.Callback)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_callback_type;
        break;
      }

      // optional .bio.motions.format.proto.Callback.Type callback_type = 2;
      case 2: {
        if (tag == 16) {
         parse_callback_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::bio::motions::format::proto::Callback_Type_IsValid(value)) {
            set_callback_type(static_cast< ::bio::motions::format::proto::Callback_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_int_value;
        break;
      }

      // optional int32 int_value = 3;
      case 3: {
        if (tag == 24) {
         parse_int_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &int_value_)));
          set_has_int_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_double_value;
        break;
      }

      // optional double double_value = 4;
      case 4: {
        if (tag == 33) {
         parse_double_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &double_value_)));
          set_has_double_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_int_list_value;
        break;
      }

      // repeated int32 int_list_value = 5 [packed = true];
      case 5: {
        if (tag == 42) {
         parse_int_list_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_int_list_value())));
        } else if (tag == 40) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 42, input, this->mutable_int_list_value())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_double_list_value;
        break;
      }

      // repeated double double_list_value = 6 [packed = true];
      case 6: {
        if (tag == 50) {
         parse_double_list_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_double_list_value())));
        } else if (tag == 49) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 50, input, this->mutable_double_list_value())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bio.motions.format.proto.Callback)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bio.motions.format.proto.Callback)
  return false;
#undef DO_
}

void Callback::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bio.motions.format.proto.Callback)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional .bio.motions.format.proto.Callback.Type callback_type = 2;
  if (has_callback_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->callback_type(), output);
  }

  // optional int32 int_value = 3;
  if (has_int_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->int_value(), output);
  }

  // optional double double_value = 4;
  if (has_double_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->double_value(), output);
  }

  // repeated int32 int_list_value = 5 [packed = true];
  if (this->int_list_value_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_int_list_value_cached_byte_size_);
  }
  for (int i = 0; i < this->int_list_value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->int_list_value(i), output);
  }

  // repeated double double_list_value = 6 [packed = true];
  if (this->double_list_value_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_double_list_value_cached_byte_size_);
  }
  for (int i = 0; i < this->double_list_value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->double_list_value(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bio.motions.format.proto.Callback)
}

::google::protobuf::uint8* Callback::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bio.motions.format.proto.Callback)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .bio.motions.format.proto.Callback.Type callback_type = 2;
  if (has_callback_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->callback_type(), target);
  }

  // optional int32 int_value = 3;
  if (has_int_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->int_value(), target);
  }

  // optional double double_value = 4;
  if (has_double_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->double_value(), target);
  }

  // repeated int32 int_list_value = 5 [packed = true];
  if (this->int_list_value_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _int_list_value_cached_byte_size_, target);
  }
  for (int i = 0; i < this->int_list_value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->int_list_value(i), target);
  }

  // repeated double double_list_value = 6 [packed = true];
  if (this->double_list_value_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _double_list_value_cached_byte_size_, target);
  }
  for (int i = 0; i < this->double_list_value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->double_list_value(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bio.motions.format.proto.Callback)
  return target;
}

int Callback::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .bio.motions.format.proto.Callback.Type callback_type = 2;
    if (has_callback_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->callback_type());
    }

    // optional int32 int_value = 3;
    if (has_int_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->int_value());
    }

    // optional double double_value = 4;
    if (has_double_value()) {
      total_size += 1 + 8;
    }

  }
  // repeated int32 int_list_value = 5 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->int_list_value_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->int_list_value(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _int_list_value_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double double_list_value = 6 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->double_list_value_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _double_list_value_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Callback::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Callback* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Callback*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Callback::MergeFrom(const Callback& from) {
  GOOGLE_CHECK_NE(&from, this);
  int_list_value_.MergeFrom(from.int_list_value_);
  double_list_value_.MergeFrom(from.double_list_value_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_callback_type()) {
      set_callback_type(from.callback_type());
    }
    if (from.has_int_value()) {
      set_int_value(from.int_value());
    }
    if (from.has_double_value()) {
      set_double_value(from.double_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Callback::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Callback::CopyFrom(const Callback& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Callback::IsInitialized() const {

  return true;
}

void Callback::Swap(Callback* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(callback_type_, other->callback_type_);
    std::swap(int_value_, other->int_value_);
    std::swap(double_value_, other->double_value_);
    int_list_value_.Swap(&other->int_list_value_);
    double_list_value_.Swap(&other->double_list_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Callback::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Callback_descriptor_;
  metadata.reflection = Callback_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Header_ChainDescription_BeadDescription_Binding::kBinderTypeFieldNumber;
const int Header_ChainDescription_BeadDescription_Binding::kForceFieldNumber;
#endif  // !_MSC_VER

Header_ChainDescription_BeadDescription_Binding::Header_ChainDescription_BeadDescription_Binding()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bio.motions.format.proto.Header.ChainDescription.BeadDescription.Binding)
}

void Header_ChainDescription_BeadDescription_Binding::InitAsDefaultInstance() {
}

Header_ChainDescription_BeadDescription_Binding::Header_ChainDescription_BeadDescription_Binding(const Header_ChainDescription_BeadDescription_Binding& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bio.motions.format.proto.Header.ChainDescription.BeadDescription.Binding)
}

void Header_ChainDescription_BeadDescription_Binding::SharedCtor() {
  _cached_size_ = 0;
  binder_type_ = 0;
  force_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Header_ChainDescription_BeadDescription_Binding::~Header_ChainDescription_BeadDescription_Binding() {
  // @@protoc_insertion_point(destructor:bio.motions.format.proto.Header.ChainDescription.BeadDescription.Binding)
  SharedDtor();
}

void Header_ChainDescription_BeadDescription_Binding::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Header_ChainDescription_BeadDescription_Binding::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Header_ChainDescription_BeadDescription_Binding::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Header_ChainDescription_BeadDescription_Binding_descriptor_;
}

const Header_ChainDescription_BeadDescription_Binding& Header_ChainDescription_BeadDescription_Binding::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

Header_ChainDescription_BeadDescription_Binding* Header_ChainDescription_BeadDescription_Binding::default_instance_ = NULL;

Header_ChainDescription_BeadDescription_Binding* Header_ChainDescription_BeadDescription_Binding::New() const {
  return new Header_ChainDescription_BeadDescription_Binding;
}

void Header_ChainDescription_BeadDescription_Binding::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Header_ChainDescription_BeadDescription_Binding*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(binder_type_, force_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Header_ChainDescription_BeadDescription_Binding::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bio.motions.format.proto.Header.ChainDescription.BeadDescription.Binding)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 binder_type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &binder_type_)));
          set_has_binder_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_force;
        break;
      }

      // optional int32 force = 2;
      case 2: {
        if (tag == 16) {
         parse_force:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &force_)));
          set_has_force();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bio.motions.format.proto.Header.ChainDescription.BeadDescription.Binding)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bio.motions.format.proto.Header.ChainDescription.BeadDescription.Binding)
  return false;
#undef DO_
}

void Header_ChainDescription_BeadDescription_Binding::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bio.motions.format.proto.Header.ChainDescription.BeadDescription.Binding)
  // optional int32 binder_type = 1;
  if (has_binder_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->binder_type(), output);
  }

  // optional int32 force = 2;
  if (has_force()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->force(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bio.motions.format.proto.Header.ChainDescription.BeadDescription.Binding)
}

::google::protobuf::uint8* Header_ChainDescription_BeadDescription_Binding::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bio.motions.format.proto.Header.ChainDescription.BeadDescription.Binding)
  // optional int32 binder_type = 1;
  if (has_binder_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->binder_type(), target);
  }

  // optional int32 force = 2;
  if (has_force()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->force(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bio.motions.format.proto.Header.ChainDescription.BeadDescription.Binding)
  return target;
}

int Header_ChainDescription_BeadDescription_Binding::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 binder_type = 1;
    if (has_binder_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->binder_type());
    }

    // optional int32 force = 2;
    if (has_force()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->force());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Header_ChainDescription_BeadDescription_Binding::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Header_ChainDescription_BeadDescription_Binding* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Header_ChainDescription_BeadDescription_Binding*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Header_ChainDescription_BeadDescription_Binding::MergeFrom(const Header_ChainDescription_BeadDescription_Binding& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_binder_type()) {
      set_binder_type(from.binder_type());
    }
    if (from.has_force()) {
      set_force(from.force());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Header_ChainDescription_BeadDescription_Binding::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Header_ChainDescription_BeadDescription_Binding::CopyFrom(const Header_ChainDescription_BeadDescription_Binding& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header_ChainDescription_BeadDescription_Binding::IsInitialized() const {

  return true;
}

void Header_ChainDescription_BeadDescription_Binding::Swap(Header_ChainDescription_BeadDescription_Binding* other) {
  if (other != this) {
    std::swap(binder_type_, other->binder_type_);
    std::swap(force_, other->force_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Header_ChainDescription_BeadDescription_Binding::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Header_ChainDescription_BeadDescription_Binding_descriptor_;
  metadata.reflection = Header_ChainDescription_BeadDescription_Binding_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Header_ChainDescription_BeadDescription::kEnergyVectorFieldNumber;
#endif  // !_MSC_VER

Header_ChainDescription_BeadDescription::Header_ChainDescription_BeadDescription()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bio.motions.format.proto.Header.ChainDescription.BeadDescription)
}

void Header_ChainDescription_BeadDescription::InitAsDefaultInstance() {
}

Header_ChainDescription_BeadDescription::Header_ChainDescription_BeadDescription(const Header_ChainDescription_BeadDescription& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bio.motions.format.proto.Header.ChainDescription.BeadDescription)
}

void Header_ChainDescription_BeadDescription::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Header_ChainDescription_BeadDescription::~Header_ChainDescription_BeadDescription() {
  // @@protoc_insertion_point(destructor:bio.motions.format.proto.Header.ChainDescription.BeadDescription)
  SharedDtor();
}

void Header_ChainDescription_BeadDescription::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Header_ChainDescription_BeadDescription::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Header_ChainDescription_BeadDescription::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Header_ChainDescription_BeadDescription_descriptor_;
}

const Header_ChainDescription_BeadDescription& Header_ChainDescription_BeadDescription::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

Header_ChainDescription_BeadDescription* Header_ChainDescription_BeadDescription::default_instance_ = NULL;

Header_ChainDescription_BeadDescription* Header_ChainDescription_BeadDescription::New() const {
  return new Header_ChainDescription_BeadDescription;
}

void Header_ChainDescription_BeadDescription::Clear() {
  energy_vector_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Header_ChainDescription_BeadDescription::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bio.motions.format.proto.Header.ChainDescription.BeadDescription)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .bio.motions.format.proto.Header.ChainDescription.BeadDescription.Binding energy_vector = 1;
      case 1: {
        if (tag == 10) {
         parse_energy_vector:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_energy_vector()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_energy_vector;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bio.motions.format.proto.Header.ChainDescription.BeadDescription)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bio.motions.format.proto.Header.ChainDescription.BeadDescription)
  return false;
#undef DO_
}

void Header_ChainDescription_BeadDescription::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bio.motions.format.proto.Header.ChainDescription.BeadDescription)
  // repeated .bio.motions.format.proto.Header.ChainDescription.BeadDescription.Binding energy_vector = 1;
  for (int i = 0; i < this->energy_vector_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->energy_vector(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bio.motions.format.proto.Header.ChainDescription.BeadDescription)
}

::google::protobuf::uint8* Header_ChainDescription_BeadDescription::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bio.motions.format.proto.Header.ChainDescription.BeadDescription)
  // repeated .bio.motions.format.proto.Header.ChainDescription.BeadDescription.Binding energy_vector = 1;
  for (int i = 0; i < this->energy_vector_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->energy_vector(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bio.motions.format.proto.Header.ChainDescription.BeadDescription)
  return target;
}

int Header_ChainDescription_BeadDescription::ByteSize() const {
  int total_size = 0;

  // repeated .bio.motions.format.proto.Header.ChainDescription.BeadDescription.Binding energy_vector = 1;
  total_size += 1 * this->energy_vector_size();
  for (int i = 0; i < this->energy_vector_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->energy_vector(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Header_ChainDescription_BeadDescription::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Header_ChainDescription_BeadDescription* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Header_ChainDescription_BeadDescription*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Header_ChainDescription_BeadDescription::MergeFrom(const Header_ChainDescription_BeadDescription& from) {
  GOOGLE_CHECK_NE(&from, this);
  energy_vector_.MergeFrom(from.energy_vector_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Header_ChainDescription_BeadDescription::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Header_ChainDescription_BeadDescription::CopyFrom(const Header_ChainDescription_BeadDescription& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header_ChainDescription_BeadDescription::IsInitialized() const {

  return true;
}

void Header_ChainDescription_BeadDescription::Swap(Header_ChainDescription_BeadDescription* other) {
  if (other != this) {
    energy_vector_.Swap(&other->energy_vector_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Header_ChainDescription_BeadDescription::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Header_ChainDescription_BeadDescription_descriptor_;
  metadata.reflection = Header_ChainDescription_BeadDescription_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Header_ChainDescription::kChainNameFieldNumber;
const int Header_ChainDescription::kBeadsFieldNumber;
#endif  // !_MSC_VER

Header_ChainDescription::Header_ChainDescription()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bio.motions.format.proto.Header.ChainDescription)
}

void Header_ChainDescription::InitAsDefaultInstance() {
}

Header_ChainDescription::Header_ChainDescription(const Header_ChainDescription& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bio.motions.format.proto.Header.ChainDescription)
}

void Header_ChainDescription::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  chain_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Header_ChainDescription::~Header_ChainDescription() {
  // @@protoc_insertion_point(destructor:bio.motions.format.proto.Header.ChainDescription)
  SharedDtor();
}

void Header_ChainDescription::SharedDtor() {
  if (chain_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete chain_name_;
  }
  if (this != default_instance_) {
  }
}

void Header_ChainDescription::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Header_ChainDescription::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Header_ChainDescription_descriptor_;
}

const Header_ChainDescription& Header_ChainDescription::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

Header_ChainDescription* Header_ChainDescription::default_instance_ = NULL;

Header_ChainDescription* Header_ChainDescription::New() const {
  return new Header_ChainDescription;
}

void Header_ChainDescription::Clear() {
  if (has_chain_name()) {
    if (chain_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      chain_name_->clear();
    }
  }
  beads_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Header_ChainDescription::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bio.motions.format.proto.Header.ChainDescription)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string chain_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chain_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->chain_name().data(), this->chain_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "chain_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_beads;
        break;
      }

      // repeated .bio.motions.format.proto.Header.ChainDescription.BeadDescription beads = 2;
      case 2: {
        if (tag == 18) {
         parse_beads:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_beads()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_beads;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bio.motions.format.proto.Header.ChainDescription)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bio.motions.format.proto.Header.ChainDescription)
  return false;
#undef DO_
}

void Header_ChainDescription::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bio.motions.format.proto.Header.ChainDescription)
  // optional string chain_name = 1;
  if (has_chain_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chain_name().data(), this->chain_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chain_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->chain_name(), output);
  }

  // repeated .bio.motions.format.proto.Header.ChainDescription.BeadDescription beads = 2;
  for (int i = 0; i < this->beads_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->beads(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bio.motions.format.proto.Header.ChainDescription)
}

::google::protobuf::uint8* Header_ChainDescription::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bio.motions.format.proto.Header.ChainDescription)
  // optional string chain_name = 1;
  if (has_chain_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chain_name().data(), this->chain_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chain_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->chain_name(), target);
  }

  // repeated .bio.motions.format.proto.Header.ChainDescription.BeadDescription beads = 2;
  for (int i = 0; i < this->beads_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->beads(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bio.motions.format.proto.Header.ChainDescription)
  return target;
}

int Header_ChainDescription::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string chain_name = 1;
    if (has_chain_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->chain_name());
    }

  }
  // repeated .bio.motions.format.proto.Header.ChainDescription.BeadDescription beads = 2;
  total_size += 1 * this->beads_size();
  for (int i = 0; i < this->beads_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->beads(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Header_ChainDescription::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Header_ChainDescription* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Header_ChainDescription*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Header_ChainDescription::MergeFrom(const Header_ChainDescription& from) {
  GOOGLE_CHECK_NE(&from, this);
  beads_.MergeFrom(from.beads_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chain_name()) {
      set_chain_name(from.chain_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Header_ChainDescription::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Header_ChainDescription::CopyFrom(const Header_ChainDescription& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header_ChainDescription::IsInitialized() const {

  return true;
}

void Header_ChainDescription::Swap(Header_ChainDescription* other) {
  if (other != this) {
    std::swap(chain_name_, other->chain_name_);
    beads_.Swap(&other->beads_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Header_ChainDescription::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Header_ChainDescription_descriptor_;
  metadata.reflection = Header_ChainDescription_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Header::kSimulationNameFieldNumber;
const int Header::kSimulationDescriptionFieldNumber;
const int Header::kBindersTypesCountFieldNumber;
const int Header::kChainsFieldNumber;
#endif  // !_MSC_VER

Header::Header()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bio.motions.format.proto.Header)
}

void Header::InitAsDefaultInstance() {
}

Header::Header(const Header& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bio.motions.format.proto.Header)
}

void Header::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  simulation_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  simulation_description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  binders_types_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Header::~Header() {
  // @@protoc_insertion_point(destructor:bio.motions.format.proto.Header)
  SharedDtor();
}

void Header::SharedDtor() {
  if (simulation_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete simulation_name_;
  }
  if (simulation_description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete simulation_description_;
  }
  if (this != default_instance_) {
  }
}

void Header::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Header::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Header_descriptor_;
}

const Header& Header::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

Header* Header::default_instance_ = NULL;

Header* Header::New() const {
  return new Header;
}

void Header::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_simulation_name()) {
      if (simulation_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        simulation_name_->clear();
      }
    }
    if (has_simulation_description()) {
      if (simulation_description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        simulation_description_->clear();
      }
    }
    binders_types_count_ = 0;
  }
  chains_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Header::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bio.motions.format.proto.Header)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string simulation_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_simulation_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->simulation_name().data(), this->simulation_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "simulation_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_simulation_description;
        break;
      }

      // optional string simulation_description = 2;
      case 2: {
        if (tag == 18) {
         parse_simulation_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_simulation_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->simulation_description().data(), this->simulation_description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "simulation_description");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_binders_types_count;
        break;
      }

      // optional int32 binders_types_count = 3;
      case 3: {
        if (tag == 24) {
         parse_binders_types_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &binders_types_count_)));
          set_has_binders_types_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_chains;
        break;
      }

      // repeated .bio.motions.format.proto.Header.ChainDescription chains = 5;
      case 5: {
        if (tag == 42) {
         parse_chains:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chains()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_chains;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bio.motions.format.proto.Header)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bio.motions.format.proto.Header)
  return false;
#undef DO_
}

void Header::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bio.motions.format.proto.Header)
  // optional string simulation_name = 1;
  if (has_simulation_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->simulation_name().data(), this->simulation_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "simulation_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->simulation_name(), output);
  }

  // optional string simulation_description = 2;
  if (has_simulation_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->simulation_description().data(), this->simulation_description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "simulation_description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->simulation_description(), output);
  }

  // optional int32 binders_types_count = 3;
  if (has_binders_types_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->binders_types_count(), output);
  }

  // repeated .bio.motions.format.proto.Header.ChainDescription chains = 5;
  for (int i = 0; i < this->chains_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->chains(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bio.motions.format.proto.Header)
}

::google::protobuf::uint8* Header::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bio.motions.format.proto.Header)
  // optional string simulation_name = 1;
  if (has_simulation_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->simulation_name().data(), this->simulation_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "simulation_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->simulation_name(), target);
  }

  // optional string simulation_description = 2;
  if (has_simulation_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->simulation_description().data(), this->simulation_description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "simulation_description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->simulation_description(), target);
  }

  // optional int32 binders_types_count = 3;
  if (has_binders_types_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->binders_types_count(), target);
  }

  // repeated .bio.motions.format.proto.Header.ChainDescription chains = 5;
  for (int i = 0; i < this->chains_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->chains(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bio.motions.format.proto.Header)
  return target;
}

int Header::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string simulation_name = 1;
    if (has_simulation_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->simulation_name());
    }

    // optional string simulation_description = 2;
    if (has_simulation_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->simulation_description());
    }

    // optional int32 binders_types_count = 3;
    if (has_binders_types_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->binders_types_count());
    }

  }
  // repeated .bio.motions.format.proto.Header.ChainDescription chains = 5;
  total_size += 1 * this->chains_size();
  for (int i = 0; i < this->chains_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chains(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Header::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Header* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Header*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Header::MergeFrom(const Header& from) {
  GOOGLE_CHECK_NE(&from, this);
  chains_.MergeFrom(from.chains_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_simulation_name()) {
      set_simulation_name(from.simulation_name());
    }
    if (from.has_simulation_description()) {
      set_simulation_description(from.simulation_description());
    }
    if (from.has_binders_types_count()) {
      set_binders_types_count(from.binders_types_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Header::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Header::CopyFrom(const Header& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header::IsInitialized() const {

  return true;
}

void Header::Swap(Header* other) {
  if (other != this) {
    std::swap(simulation_name_, other->simulation_name_);
    std::swap(simulation_description_, other->simulation_description_);
    std::swap(binders_types_count_, other->binders_types_count_);
    chains_.Swap(&other->chains_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Header::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Header_descriptor_;
  metadata.reflection = Header_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Delta::kFromFieldNumber;
const int Delta::kDispFieldNumber;
const int Delta::kCallbacksFieldNumber;
#endif  // !_MSC_VER

Delta::Delta()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bio.motions.format.proto.Delta)
}

void Delta::InitAsDefaultInstance() {
  from_ = const_cast< ::bio::motions::format::proto::Point*>(&::bio::motions::format::proto::Point::default_instance());
  disp_ = const_cast< ::bio::motions::format::proto::Point*>(&::bio::motions::format::proto::Point::default_instance());
}

Delta::Delta(const Delta& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bio.motions.format.proto.Delta)
}

void Delta::SharedCtor() {
  _cached_size_ = 0;
  from_ = NULL;
  disp_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Delta::~Delta() {
  // @@protoc_insertion_point(destructor:bio.motions.format.proto.Delta)
  SharedDtor();
}

void Delta::SharedDtor() {
  if (this != default_instance_) {
    delete from_;
    delete disp_;
  }
}

void Delta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Delta::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Delta_descriptor_;
}

const Delta& Delta::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

Delta* Delta::default_instance_ = NULL;

Delta* Delta::New() const {
  return new Delta;
}

void Delta::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_from()) {
      if (from_ != NULL) from_->::bio::motions::format::proto::Point::Clear();
    }
    if (has_disp()) {
      if (disp_ != NULL) disp_->::bio::motions::format::proto::Point::Clear();
    }
  }
  callbacks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Delta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bio.motions.format.proto.Delta)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bio.motions.format.proto.Point from = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_from()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_disp;
        break;
      }

      // optional .bio.motions.format.proto.Point disp = 2;
      case 2: {
        if (tag == 18) {
         parse_disp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_disp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_callbacks;
        break;
      }

      // repeated .bio.motions.format.proto.Callback callbacks = 3;
      case 3: {
        if (tag == 26) {
         parse_callbacks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_callbacks()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_callbacks;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bio.motions.format.proto.Delta)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bio.motions.format.proto.Delta)
  return false;
#undef DO_
}

void Delta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bio.motions.format.proto.Delta)
  // optional .bio.motions.format.proto.Point from = 1;
  if (has_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->from(), output);
  }

  // optional .bio.motions.format.proto.Point disp = 2;
  if (has_disp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->disp(), output);
  }

  // repeated .bio.motions.format.proto.Callback callbacks = 3;
  for (int i = 0; i < this->callbacks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->callbacks(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bio.motions.format.proto.Delta)
}

::google::protobuf::uint8* Delta::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bio.motions.format.proto.Delta)
  // optional .bio.motions.format.proto.Point from = 1;
  if (has_from()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->from(), target);
  }

  // optional .bio.motions.format.proto.Point disp = 2;
  if (has_disp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->disp(), target);
  }

  // repeated .bio.motions.format.proto.Callback callbacks = 3;
  for (int i = 0; i < this->callbacks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->callbacks(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bio.motions.format.proto.Delta)
  return target;
}

int Delta::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .bio.motions.format.proto.Point from = 1;
    if (has_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->from());
    }

    // optional .bio.motions.format.proto.Point disp = 2;
    if (has_disp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->disp());
    }

  }
  // repeated .bio.motions.format.proto.Callback callbacks = 3;
  total_size += 1 * this->callbacks_size();
  for (int i = 0; i < this->callbacks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->callbacks(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Delta::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Delta* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Delta*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Delta::MergeFrom(const Delta& from) {
  GOOGLE_CHECK_NE(&from, this);
  callbacks_.MergeFrom(from.callbacks_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_from()) {
      mutable_from()->::bio::motions::format::proto::Point::MergeFrom(from.from());
    }
    if (from.has_disp()) {
      mutable_disp()->::bio::motions::format::proto::Point::MergeFrom(from.disp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Delta::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Delta::CopyFrom(const Delta& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Delta::IsInitialized() const {

  return true;
}

void Delta::Swap(Delta* other) {
  if (other != this) {
    std::swap(from_, other->from_);
    std::swap(disp_, other->disp_);
    callbacks_.Swap(&other->callbacks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Delta::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Delta_descriptor_;
  metadata.reflection = Delta_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Keyframe_Binder::kBinderTypeFieldNumber;
const int Keyframe_Binder::kPositionFieldNumber;
#endif  // !_MSC_VER

Keyframe_Binder::Keyframe_Binder()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bio.motions.format.proto.Keyframe.Binder)
}

void Keyframe_Binder::InitAsDefaultInstance() {
  position_ = const_cast< ::bio::motions::format::proto::Point*>(&::bio::motions::format::proto::Point::default_instance());
}

Keyframe_Binder::Keyframe_Binder(const Keyframe_Binder& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bio.motions.format.proto.Keyframe.Binder)
}

void Keyframe_Binder::SharedCtor() {
  _cached_size_ = 0;
  binder_type_ = 0;
  position_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Keyframe_Binder::~Keyframe_Binder() {
  // @@protoc_insertion_point(destructor:bio.motions.format.proto.Keyframe.Binder)
  SharedDtor();
}

void Keyframe_Binder::SharedDtor() {
  if (this != default_instance_) {
    delete position_;
  }
}

void Keyframe_Binder::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Keyframe_Binder::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Keyframe_Binder_descriptor_;
}

const Keyframe_Binder& Keyframe_Binder::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

Keyframe_Binder* Keyframe_Binder::default_instance_ = NULL;

Keyframe_Binder* Keyframe_Binder::New() const {
  return new Keyframe_Binder;
}

void Keyframe_Binder::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    binder_type_ = 0;
    if (has_position()) {
      if (position_ != NULL) position_->::bio::motions::format::proto::Point::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Keyframe_Binder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bio.motions.format.proto.Keyframe.Binder)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 binder_type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &binder_type_)));
          set_has_binder_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_position;
        break;
      }

      // optional .bio.motions.format.proto.Point position = 2;
      case 2: {
        if (tag == 18) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bio.motions.format.proto.Keyframe.Binder)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bio.motions.format.proto.Keyframe.Binder)
  return false;
#undef DO_
}

void Keyframe_Binder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bio.motions.format.proto.Keyframe.Binder)
  // optional int32 binder_type = 1;
  if (has_binder_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->binder_type(), output);
  }

  // optional .bio.motions.format.proto.Point position = 2;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->position(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bio.motions.format.proto.Keyframe.Binder)
}

::google::protobuf::uint8* Keyframe_Binder::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bio.motions.format.proto.Keyframe.Binder)
  // optional int32 binder_type = 1;
  if (has_binder_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->binder_type(), target);
  }

  // optional .bio.motions.format.proto.Point position = 2;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->position(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bio.motions.format.proto.Keyframe.Binder)
  return target;
}

int Keyframe_Binder::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 binder_type = 1;
    if (has_binder_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->binder_type());
    }

    // optional .bio.motions.format.proto.Point position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Keyframe_Binder::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Keyframe_Binder* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Keyframe_Binder*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Keyframe_Binder::MergeFrom(const Keyframe_Binder& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_binder_type()) {
      set_binder_type(from.binder_type());
    }
    if (from.has_position()) {
      mutable_position()->::bio::motions::format::proto::Point::MergeFrom(from.position());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Keyframe_Binder::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Keyframe_Binder::CopyFrom(const Keyframe_Binder& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Keyframe_Binder::IsInitialized() const {

  return true;
}

void Keyframe_Binder::Swap(Keyframe_Binder* other) {
  if (other != this) {
    std::swap(binder_type_, other->binder_type_);
    std::swap(position_, other->position_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Keyframe_Binder::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Keyframe_Binder_descriptor_;
  metadata.reflection = Keyframe_Binder_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Keyframe_Chain::kBeadPositionsFieldNumber;
#endif  // !_MSC_VER

Keyframe_Chain::Keyframe_Chain()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bio.motions.format.proto.Keyframe.Chain)
}

void Keyframe_Chain::InitAsDefaultInstance() {
}

Keyframe_Chain::Keyframe_Chain(const Keyframe_Chain& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bio.motions.format.proto.Keyframe.Chain)
}

void Keyframe_Chain::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Keyframe_Chain::~Keyframe_Chain() {
  // @@protoc_insertion_point(destructor:bio.motions.format.proto.Keyframe.Chain)
  SharedDtor();
}

void Keyframe_Chain::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Keyframe_Chain::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Keyframe_Chain::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Keyframe_Chain_descriptor_;
}

const Keyframe_Chain& Keyframe_Chain::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

Keyframe_Chain* Keyframe_Chain::default_instance_ = NULL;

Keyframe_Chain* Keyframe_Chain::New() const {
  return new Keyframe_Chain;
}

void Keyframe_Chain::Clear() {
  bead_positions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Keyframe_Chain::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bio.motions.format.proto.Keyframe.Chain)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .bio.motions.format.proto.Point bead_positions = 1;
      case 1: {
        if (tag == 10) {
         parse_bead_positions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bead_positions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_bead_positions;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bio.motions.format.proto.Keyframe.Chain)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bio.motions.format.proto.Keyframe.Chain)
  return false;
#undef DO_
}

void Keyframe_Chain::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bio.motions.format.proto.Keyframe.Chain)
  // repeated .bio.motions.format.proto.Point bead_positions = 1;
  for (int i = 0; i < this->bead_positions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->bead_positions(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bio.motions.format.proto.Keyframe.Chain)
}

::google::protobuf::uint8* Keyframe_Chain::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bio.motions.format.proto.Keyframe.Chain)
  // repeated .bio.motions.format.proto.Point bead_positions = 1;
  for (int i = 0; i < this->bead_positions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->bead_positions(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bio.motions.format.proto.Keyframe.Chain)
  return target;
}

int Keyframe_Chain::ByteSize() const {
  int total_size = 0;

  // repeated .bio.motions.format.proto.Point bead_positions = 1;
  total_size += 1 * this->bead_positions_size();
  for (int i = 0; i < this->bead_positions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bead_positions(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Keyframe_Chain::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Keyframe_Chain* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Keyframe_Chain*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Keyframe_Chain::MergeFrom(const Keyframe_Chain& from) {
  GOOGLE_CHECK_NE(&from, this);
  bead_positions_.MergeFrom(from.bead_positions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Keyframe_Chain::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Keyframe_Chain::CopyFrom(const Keyframe_Chain& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Keyframe_Chain::IsInitialized() const {

  return true;
}

void Keyframe_Chain::Swap(Keyframe_Chain* other) {
  if (other != this) {
    bead_positions_.Swap(&other->bead_positions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Keyframe_Chain::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Keyframe_Chain_descriptor_;
  metadata.reflection = Keyframe_Chain_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Keyframe::kBindersFieldNumber;
const int Keyframe::kChainsFieldNumber;
const int Keyframe::kCallbacksFieldNumber;
#endif  // !_MSC_VER

Keyframe::Keyframe()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bio.motions.format.proto.Keyframe)
}

void Keyframe::InitAsDefaultInstance() {
}

Keyframe::Keyframe(const Keyframe& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bio.motions.format.proto.Keyframe)
}

void Keyframe::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Keyframe::~Keyframe() {
  // @@protoc_insertion_point(destructor:bio.motions.format.proto.Keyframe)
  SharedDtor();
}

void Keyframe::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Keyframe::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Keyframe::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Keyframe_descriptor_;
}

const Keyframe& Keyframe::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

Keyframe* Keyframe::default_instance_ = NULL;

Keyframe* Keyframe::New() const {
  return new Keyframe;
}

void Keyframe::Clear() {
  binders_.Clear();
  chains_.Clear();
  callbacks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Keyframe::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bio.motions.format.proto.Keyframe)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .bio.motions.format.proto.Keyframe.Binder binders = 3;
      case 3: {
        if (tag == 26) {
         parse_binders:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_binders()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_binders;
        if (input->ExpectTag(34)) goto parse_chains;
        break;
      }

      // repeated .bio.motions.format.proto.Keyframe.Chain chains = 4;
      case 4: {
        if (tag == 34) {
         parse_chains:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chains()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_chains;
        if (input->ExpectTag(42)) goto parse_callbacks;
        break;
      }

      // repeated .bio.motions.format.proto.Callback callbacks = 5;
      case 5: {
        if (tag == 42) {
         parse_callbacks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_callbacks()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_callbacks;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bio.motions.format.proto.Keyframe)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bio.motions.format.proto.Keyframe)
  return false;
#undef DO_
}

void Keyframe::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bio.motions.format.proto.Keyframe)
  // repeated .bio.motions.format.proto.Keyframe.Binder binders = 3;
  for (int i = 0; i < this->binders_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->binders(i), output);
  }

  // repeated .bio.motions.format.proto.Keyframe.Chain chains = 4;
  for (int i = 0; i < this->chains_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->chains(i), output);
  }

  // repeated .bio.motions.format.proto.Callback callbacks = 5;
  for (int i = 0; i < this->callbacks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->callbacks(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bio.motions.format.proto.Keyframe)
}

::google::protobuf::uint8* Keyframe::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bio.motions.format.proto.Keyframe)
  // repeated .bio.motions.format.proto.Keyframe.Binder binders = 3;
  for (int i = 0; i < this->binders_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->binders(i), target);
  }

  // repeated .bio.motions.format.proto.Keyframe.Chain chains = 4;
  for (int i = 0; i < this->chains_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->chains(i), target);
  }

  // repeated .bio.motions.format.proto.Callback callbacks = 5;
  for (int i = 0; i < this->callbacks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->callbacks(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bio.motions.format.proto.Keyframe)
  return target;
}

int Keyframe::ByteSize() const {
  int total_size = 0;

  // repeated .bio.motions.format.proto.Keyframe.Binder binders = 3;
  total_size += 1 * this->binders_size();
  for (int i = 0; i < this->binders_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->binders(i));
  }

  // repeated .bio.motions.format.proto.Keyframe.Chain chains = 4;
  total_size += 1 * this->chains_size();
  for (int i = 0; i < this->chains_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chains(i));
  }

  // repeated .bio.motions.format.proto.Callback callbacks = 5;
  total_size += 1 * this->callbacks_size();
  for (int i = 0; i < this->callbacks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->callbacks(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Keyframe::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Keyframe* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Keyframe*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Keyframe::MergeFrom(const Keyframe& from) {
  GOOGLE_CHECK_NE(&from, this);
  binders_.MergeFrom(from.binders_);
  chains_.MergeFrom(from.chains_);
  callbacks_.MergeFrom(from.callbacks_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Keyframe::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Keyframe::CopyFrom(const Keyframe& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Keyframe::IsInitialized() const {

  return true;
}

void Keyframe::Swap(Keyframe* other) {
  if (other != this) {
    binders_.Swap(&other->binders_);
    chains_.Swap(&other->chains_);
    callbacks_.Swap(&other->callbacks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Keyframe::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Keyframe_descriptor_;
  metadata.reflection = Keyframe_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace format
}  // namespace motions
}  // namespace bio

// @@protoc_insertion_point(global_scope)
